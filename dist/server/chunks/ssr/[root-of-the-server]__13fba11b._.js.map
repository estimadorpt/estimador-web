{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///Users/bernardo/estimador-web/src/lib/utils/probability-calculator.ts"],"sourcesContent":["import { SeatData } from '@/types';\n\n// Calculate bloc majority probability\nexport function calculateBlocMajorityProbability(\n  simulationData: SeatData[], \n  blocParties: string[], \n  threshold: number\n): number {\n  if (!simulationData || simulationData.length === 0) return 0;\n  \n  let successCount = 0;\n  for (const simulation of simulationData) {\n    const blocTotal = blocParties.reduce((sum, party) => sum + (simulation[party] || 0), 0);\n    if (blocTotal >= threshold) successCount++;\n  }\n  \n  return successCount / simulationData.length;\n}\n\n// Calculate party most seats probability  \nexport function calculatePartyMostSeatsProbability(\n  simulationData: SeatData[],\n  targetParty: string,\n  competitorParties: string[]\n): number {\n  if (!simulationData || simulationData.length === 0) return 0;\n  \n  let successCount = 0;\n  for (const simulation of simulationData) {\n    const targetSeats = simulation[targetParty] || 0;\n    const isWinning = competitorParties.every(competitor => \n      targetSeats > (simulation[competitor] || 0)\n    );\n    if (isWinning) successCount++;\n  }\n  \n  return successCount / simulationData.length;\n}\n\n// Calculate bloc A greater than bloc B probability\nexport function calculateBlocAGreaterThanBlocBProbability(\n  simulationData: SeatData[],\n  blocAParties: string[],\n  blocBParties: string[]\n): number {\n  if (!simulationData || simulationData.length === 0) return 0;\n  \n  let successCount = 0;\n  for (const simulation of simulationData) {\n    const blocATotal = blocAParties.reduce((sum, party) => sum + (simulation[party] || 0), 0);\n    const blocBTotal = blocBParties.reduce((sum, party) => sum + (simulation[party] || 0), 0);\n    if (blocATotal > blocBTotal) successCount++;\n  }\n  \n  return successCount / simulationData.length;\n}\n\n// Format probability as percentage\nexport function formatProbabilityPercent(probability: number): string {\n  return `${Math.round(probability * 100)}%`;\n}"],"names":[],"mappings":";;;;;;;;;;AAGO,SAAS,iCACd,cAA0B,EAC1B,WAAqB,EACrB,SAAiB;IAEjB,IAAI,CAAC,kBAAkB,eAAe,MAAM,KAAK,GAAG,OAAO;IAE3D,IAAI,eAAe;IACnB,KAAK,MAAM,cAAc,eAAgB;QACvC,MAAM,YAAY,YAAY,MAAM,CAAC,CAAC,KAAK,QAAU,MAAM,CAAC,UAAU,CAAC,MAAM,IAAI,CAAC,GAAG;QACrF,IAAI,aAAa,WAAW;IAC9B;IAEA,OAAO,eAAe,eAAe,MAAM;AAC7C;AAGO,SAAS,mCACd,cAA0B,EAC1B,WAAmB,EACnB,iBAA2B;IAE3B,IAAI,CAAC,kBAAkB,eAAe,MAAM,KAAK,GAAG,OAAO;IAE3D,IAAI,eAAe;IACnB,KAAK,MAAM,cAAc,eAAgB;QACvC,MAAM,cAAc,UAAU,CAAC,YAAY,IAAI;QAC/C,MAAM,YAAY,kBAAkB,KAAK,CAAC,CAAA,aACxC,cAAc,CAAC,UAAU,CAAC,WAAW,IAAI,CAAC;QAE5C,IAAI,WAAW;IACjB;IAEA,OAAO,eAAe,eAAe,MAAM;AAC7C;AAGO,SAAS,0CACd,cAA0B,EAC1B,YAAsB,EACtB,YAAsB;IAEtB,IAAI,CAAC,kBAAkB,eAAe,MAAM,KAAK,GAAG,OAAO;IAE3D,IAAI,eAAe;IACnB,KAAK,MAAM,cAAc,eAAgB;QACvC,MAAM,aAAa,aAAa,MAAM,CAAC,CAAC,KAAK,QAAU,MAAM,CAAC,UAAU,CAAC,MAAM,IAAI,CAAC,GAAG;QACvF,MAAM,aAAa,aAAa,MAAM,CAAC,CAAC,KAAK,QAAU,MAAM,CAAC,UAAU,CAAC,MAAM,IAAI,CAAC,GAAG;QACvF,IAAI,aAAa,YAAY;IAC/B;IAEA,OAAO,eAAe,eAAe,MAAM;AAC7C;AAGO,SAAS,yBAAyB,WAAmB;IAC1D,OAAO,GAAG,KAAK,KAAK,CAAC,cAAc,KAAK,CAAC,CAAC;AAC5C","debugId":null}},
    {"offset": {"line": 61, "column": 0}, "map": {"version":3,"sources":["file:///Users/bernardo/estimador-web/src/lib/config/blocs.ts"],"sourcesContent":["export const leftBlocParties = [\"PS\", \"BE\", \"CDU\", \"L\"];\nexport const rightBlocParties = [\"AD\", \"IL\"];\nexport const majorityThreshold = 116;\n\nexport const rightPlusParties = [\"AD\", \"IL\"];\nexport const leftPlusScenarioParties = [\"PS\", \"L\", \"PAN\", \"BE\", \"CDU\"];"],"names":[],"mappings":";;;;;;;;;;;;AAAO,MAAM,kBAAkB;IAAC;IAAM;IAAM;IAAO;CAAI;AAChD,MAAM,mBAAmB;IAAC;IAAM;CAAK;AACrC,MAAM,oBAAoB;AAE1B,MAAM,mBAAmB;IAAC;IAAM;CAAK;AACrC,MAAM,0BAA0B;IAAC;IAAM;IAAK;IAAO;IAAM;CAAM","debugId":null}},
    {"offset": {"line": 99, "column": 0}, "map": {"version":3,"sources":["file:///Users/bernardo/estimador-web/src/lib/config/colors.ts"],"sourcesContent":["export const partyColors = {\n  \"AD\": \"#FF8C00\",  // Dark Orange\n  \"PS\": \"#E57373\",  // Muted Pink\n  \"CH\": \"#377EB8\",  // Blue\n  \"IL\": \"#A6CEE3\",  // Light Blue \n  \"BE\": \"#000000\",  // Black\n  \"CDU\": \"#E41A1C\", // Red\n  \"L\":  \"#90EE90\",  // Light Green\n  \"PAN\": \"#4CAF50\", // Green for PAN\n  \"OTH\": \"#A65628\"  // Brown\n};\n\nexport const partyOrder = [\"AD\", \"PS\", \"CH\", \"IL\", \"BE\", \"CDU\", \"L\", \"PAN\", \"OTH\"];\n\nexport const partyNames = {\n  \"AD\": \"Aliança Democrática\",\n  \"PS\": \"Partido Socialista\", \n  \"CH\": \"Chega\",\n  \"IL\": \"Iniciativa Liberal\",\n  \"BE\": \"Bloco de Esquerda\",\n  \"CDU\": \"CDU\",\n  \"L\": \"Livre\",\n  \"PAN\": \"PAN\",\n  \"OTH\": \"Others\"\n};"],"names":[],"mappings":";;;;;;;;AAAO,MAAM,cAAc;IACzB,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,OAAO;IACP,KAAM;IACN,OAAO;IACP,OAAO,UAAW,QAAQ;AAC5B;AAEO,MAAM,aAAa;IAAC;IAAM;IAAM;IAAM;IAAM;IAAM;IAAO;IAAK;IAAO;CAAM;AAE3E,MAAM,aAAa;IACxB,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,OAAO;IACP,KAAK;IACL,OAAO;IACP,OAAO;AACT","debugId":null}},
    {"offset": {"line": 150, "column": 0}, "map": {"version":3,"sources":["file:///Users/bernardo/estimador-web/src/lib/utils/data-loader.ts"],"sourcesContent":["import { promises as fs } from 'fs';\nimport path from 'path';\nimport { SeatData, TrendData, DistrictForecast, ContestedSeat } from '@/types';\n\n// Load data from the public directory\nexport async function loadJsonData<T>(filename: string): Promise<T> {\n  const filePath = path.join(process.cwd(), 'public', 'data', filename);\n  const fileContents = await fs.readFile(filePath, 'utf8');\n  return JSON.parse(fileContents);\n}\n\nexport async function loadForecastData() {\n  try {\n    const [seatData, nationalTrends, districtForecast, contestedSeats, houseEffects] = await Promise.all([\n      loadJsonData<SeatData[]>('seat_forecast_simulations.json'),\n      loadJsonData<TrendData[]>('national_trends.json'),\n      loadJsonData<any[]>('district_forecast.json'),\n      loadJsonData<any>('contested_summary.json'),\n      loadJsonData<any[]>('house_effects.json').catch(() => [])\n    ]);\n\n    return {\n      seatData,\n      nationalTrends, \n      districtForecast,\n      contestedSeats,\n      houseEffects\n    };\n  } catch (error) {\n    console.error('Error loading forecast data:', error);\n    return {\n      seatData: [] as SeatData[],\n      nationalTrends: [] as TrendData[],\n      districtForecast: [] as any[],\n      contestedSeats: {} as any,\n      houseEffects: [] as any[]\n    };\n  }\n}"],"names":[],"mappings":";;;;;;AAAA;AACA;;;AAIO,eAAe,aAAgB,QAAgB;IACpD,MAAM,WAAW,4GAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,UAAU,QAAQ;IAC5D,MAAM,eAAe,MAAM,yGAAE,CAAC,QAAQ,CAAC,UAAU;IACjD,OAAO,KAAK,KAAK,CAAC;AACpB;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,CAAC,UAAU,gBAAgB,kBAAkB,gBAAgB,aAAa,GAAG,MAAM,QAAQ,GAAG,CAAC;YACnG,aAAyB;YACzB,aAA0B;YAC1B,aAAoB;YACpB,aAAkB;YAClB,aAAoB,sBAAsB,KAAK,CAAC,IAAM,EAAE;SACzD;QAED,OAAO;YACL;YACA;YACA;YACA;YACA;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,OAAO;YACL,UAAU,EAAE;YACZ,gBAAgB,EAAE;YAClB,kBAAkB,EAAE;YACpB,gBAAgB,CAAC;YACjB,cAAc,EAAE;QAClB;IACF;AACF","debugId":null}},
    {"offset": {"line": 196, "column": 0}, "map": {"version":3,"sources":["file:///Users/bernardo/estimador-web/src/components/charts/PollingChart.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const PollingChart = registerClientReference(\n    function() { throw new Error(\"Attempted to call PollingChart() from the server but PollingChart is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/charts/PollingChart.tsx <module evaluation>\",\n    \"PollingChart\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;AACO,MAAM,eAAe,IAAA,wQAAuB,EAC/C;IAAa,MAAM,IAAI,MAAM;AAAwO,GACrQ,wEACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 210, "column": 0}, "map": {"version":3,"sources":["file:///Users/bernardo/estimador-web/src/components/charts/PollingChart.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const PollingChart = registerClientReference(\n    function() { throw new Error(\"Attempted to call PollingChart() from the server but PollingChart is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/charts/PollingChart.tsx\",\n    \"PollingChart\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;AACO,MAAM,eAAe,IAAA,wQAAuB,EAC/C;IAAa,MAAM,IAAI,MAAM;AAAwO,GACrQ,oDACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 224, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 232, "column": 0}, "map": {"version":3,"sources":["file:///Users/bernardo/estimador-web/src/components/charts/CoalitionDotPlot.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const CoalitionDotPlot = registerClientReference(\n    function() { throw new Error(\"Attempted to call CoalitionDotPlot() from the server but CoalitionDotPlot is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/charts/CoalitionDotPlot.tsx <module evaluation>\",\n    \"CoalitionDotPlot\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;AACO,MAAM,mBAAmB,IAAA,wQAAuB,EACnD;IAAa,MAAM,IAAI,MAAM;AAAgP,GAC7Q,4EACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 246, "column": 0}, "map": {"version":3,"sources":["file:///Users/bernardo/estimador-web/src/components/charts/CoalitionDotPlot.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const CoalitionDotPlot = registerClientReference(\n    function() { throw new Error(\"Attempted to call CoalitionDotPlot() from the server but CoalitionDotPlot is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/charts/CoalitionDotPlot.tsx\",\n    \"CoalitionDotPlot\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;AACO,MAAM,mBAAmB,IAAA,wQAAuB,EACnD;IAAa,MAAM,IAAI,MAAM;AAAgP,GAC7Q,wDACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 260, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 268, "column": 0}, "map": {"version":3,"sources":["file:///Users/bernardo/estimador-web/src/app/page.tsx"],"sourcesContent":["import { Button } from \"@/components/ui/button\";\nimport Link from \"next/link\";\nimport { \n  calculateBlocMajorityProbability, \n  calculatePartyMostSeatsProbability,\n  formatProbabilityPercent \n} from \"@/lib/utils/probability-calculator\";\nimport { leftBlocParties, rightBlocParties, majorityThreshold } from \"@/lib/config/blocs\";\nimport { partyColors, partyNames } from \"@/lib/config/colors\";\nimport { loadForecastData } from \"@/lib/utils/data-loader\";\nimport { ArrowRight, TrendingUp, BarChart3, Map, Users, Calendar } from \"lucide-react\";\nimport { PollingChart } from \"@/components/charts/PollingChart\";\nimport { CoalitionDotPlot } from \"@/components/charts/CoalitionDotPlot\";\nimport { SimpleCoalitionDots } from \"@/components/charts/SimpleCoalitionDots\";\n\nexport default async function Home() {\n  const { seatData, nationalTrends } = await loadForecastData();\n  \n  // Calculate key probabilities\n  const probLeftMajority = calculateBlocMajorityProbability(seatData, leftBlocParties, majorityThreshold);\n  const probRightMajority = calculateBlocMajorityProbability(seatData, rightBlocParties, majorityThreshold);\n  const probAdMostSeats = calculatePartyMostSeatsProbability(seatData, 'AD', ['PS', 'CH']);\n  const probPsMostSeats = calculatePartyMostSeatsProbability(seatData, 'PS', ['AD', 'CH']);\n  \n  // Get latest trends and determine leader\n  const latest = nationalTrends\n    .filter(d => d.metric === 'vote_share_mean')\n    .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())\n    .reduce((acc, d) => {\n      if (!acc[d.party]) acc[d.party] = d;\n      return acc;\n    }, {} as any);\n\n  const parties = Object.values(latest).sort((a: any, b: any) => b.value - a.value);\n  const leader = parties[0] as any;\n  const secondPlace = parties[1] as any;\n  const margin = ((leader.value - secondPlace.value) * 100).toFixed(1);\n\n  const lastUpdate = new Date(leader.date).toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'long', \n    day: 'numeric'\n  });\n\n  // Calculate seat projections for top parties\n  const getPartySeats = (party: string) => {\n    const partySeats = seatData.map(simulation => simulation[party] || 0).sort((a, b) => a - b);\n    if (partySeats.length === 0) return { mean: 0, min: 0, max: 0 };\n    return {\n      mean: Math.round(partySeats.reduce((sum, s) => sum + s, 0) / partySeats.length),\n      min: partySeats[Math.floor(partySeats.length * 0.1)],\n      max: partySeats[Math.floor(partySeats.length * 0.9)]\n    };\n  };\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      {/* Minimal Header */}\n      <header className=\"border-b border-gray-200 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 py-3\">\n          <div className=\"flex items-center justify-center relative\">\n            <div className=\"flex items-center gap-3\">\n              <h1 className=\"text-lg font-bold text-gray-900\">estimador.pt</h1>\n              <span className=\"text-xs text-gray-500 border-l pl-3 ml-3\">Portuguese Election Forecast</span>\n            </div>\n            <div className=\"absolute right-0 flex items-center gap-1 text-xs text-gray-500\">\n              <Calendar className=\"w-3 h-3\" />\n              <span>Updated {lastUpdate}</span>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* News-style Headline Section */}\n      <section className=\"border-b border-gray-200\">\n        <div className=\"max-w-7xl mx-auto px-4 py-8\">\n          <div className=\"max-w-4xl\">\n            <h1 className=\"text-3xl md:text-4xl font-bold text-gray-900 mb-4 leading-tight\">\n              {partyNames[leader.party]} leads election race with {(leader.value * 100).toFixed(1)}% support\n            </h1>\n            <p className=\"text-lg text-gray-600 mb-6\">\n              Latest forecast shows {partyNames[leader.party]} ahead by {margin} points, \n              with a {formatProbabilityPercent(probAdMostSeats > probPsMostSeats ? probAdMostSeats : probPsMostSeats)} \n              chance of winning the most seats\n            </p>\n            <div className=\"flex items-center gap-4 text-sm text-gray-500\">\n              <span>Based on {seatData.length.toLocaleString()} simulations</span>\n              <span>•</span>\n              <Link href=\"/methodology\" className=\"text-blue-600 hover:text-blue-800\">\n                Methodology\n              </Link>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Key Numbers - BBC Style */}\n      <section className=\"bg-gray-50 border-b border-gray-200\">\n        <div className=\"max-w-7xl mx-auto px-4 py-8\">\n          <h2 className=\"text-xl font-semibold text-gray-900 mb-6\">Chance of winning most seats</h2>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6\">\n            {['AD', 'PS', 'CH'].map(party => {\n              const prob = party === 'AD' ? probAdMostSeats : \n                          party === 'PS' ? probPsMostSeats : \n                          1 - probAdMostSeats - probPsMostSeats;\n              const seats = getPartySeats(party);\n              return (\n                <div key={party} className=\"bg-white p-4 rounded-lg border border-gray-200\">\n                  <div className=\"flex items-center gap-3 mb-3\">\n                    <div \n                      className=\"w-4 h-4 rounded\"\n                      style={{ backgroundColor: partyColors[party as keyof typeof partyColors] }}\n                    />\n                    <span className=\"font-medium text-gray-900\">{partyNames[party as keyof typeof partyNames]}</span>\n                  </div>\n                  <div className=\"text-2xl font-bold text-gray-900 mb-1\">\n                    {formatProbabilityPercent(prob)}\n                  </div>\n                  <div className=\"text-sm text-gray-500\">\n                    {seats.min}-{seats.max} seats\n                  </div>\n                </div>\n              );\n            })}\n            <div className=\"bg-white p-4 rounded-lg border border-gray-200\">\n              <div className=\"flex items-center gap-3 mb-3\">\n                <div className=\"w-4 h-4 rounded bg-gray-400\" />\n                <span className=\"font-medium text-gray-900\">Others</span>\n              </div>\n              <div className=\"text-2xl font-bold text-gray-900 mb-1\">\n                {formatProbabilityPercent(1 - probAdMostSeats - probPsMostSeats - (1 - probAdMostSeats - probPsMostSeats))}\n              </div>\n              <div className=\"text-sm text-gray-500\">\n                0-20 seats\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Main Analysis Section */}\n      <section className=\"py-8\">\n        <div className=\"max-w-7xl mx-auto px-4 space-y-8\">\n          \n          {/* Coalition Outcomes - Key Visual */}\n          <div className=\"bg-white border border-gray-200 rounded-lg p-6\">\n            <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">Coalition seat projections</h2>\n            <p className=\"text-sm text-gray-600 mb-6\">\n              Each dot represents one simulation outcome. Lines show median projections.\n            </p>\n            <div className=\"w-full\">\n              <CoalitionDotPlot data={seatData} />\n            </div>\n          </div>\n\n          {/* Charts Grid */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-5 gap-8\">\n            \n            {/* Polling Trends */}\n            <div className=\"lg:col-span-3 bg-white border border-gray-200 rounded-lg p-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Polling trends</h3>\n              <PollingChart data={nationalTrends} />\n            </div>\n\n            {/* Current standings */}\n            <div className=\"lg:col-span-2 bg-white border border-gray-200 rounded-lg p-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Current standings</h3>\n              <div className=\"space-y-3\">\n                {parties.slice(0, 6).map((party: any, index) => (\n                  <div key={party.party} className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                      <span className=\"text-sm font-medium text-gray-600\">#{index + 1}</span>\n                      <div \n                        className=\"w-3 h-3 rounded\"\n                        style={{ backgroundColor: partyColors[party.party as keyof typeof partyColors] }}\n                      />\n                      <span className=\"text-sm font-medium text-gray-900\">\n                        {partyNames[party.party as keyof typeof partyNames] || party.party}\n                      </span>\n                    </div>\n                    <span className=\"text-sm font-bold text-gray-900\">\n                      {(party.value * 100).toFixed(1)}%\n                    </span>\n                  </div>\n                ))}\n              </div>\n              \n              {/* Coalition scenarios in sidebar */}\n              <div className=\"mt-6 pt-6 border-t border-gray-200\">\n                <h4 className=\"text-sm font-semibold text-gray-900 mb-3\">Coalition scenarios</h4>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-gray-900\">Right majority</span>\n                    <span className=\"text-lg font-bold text-gray-900\">\n                      {formatProbabilityPercent(probRightMajority)}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-gray-900\">Left majority</span>\n                    <span className=\"text-lg font-bold text-gray-900\">\n                      {formatProbabilityPercent(probLeftMajority)}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-gray-900\">Hung parliament</span>\n                    <span className=\"text-lg font-bold text-gray-900\">\n                      {formatProbabilityPercent(1 - probRightMajority - probLeftMajority)}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Navigation to detailed pages */}\n      <section className=\"bg-white border-b border-gray-200\">\n        <div className=\"max-w-7xl mx-auto px-4 py-6\">\n          <div className=\"flex flex-wrap gap-3\">\n            <Link \n              href=\"/forecast\" \n              className=\"inline-flex items-center px-4 py-2 text-sm font-medium text-blue-600 bg-blue-50 border border-blue-200 rounded-md hover:bg-blue-100 transition-colors\"\n            >\n              <BarChart3 className=\"w-4 h-4 mr-2\" />\n              Full forecast model\n            </Link>\n            <Link \n              href=\"/articles\" \n              className=\"inline-flex items-center px-4 py-2 text-sm font-medium text-gray-700 bg-gray-50 border border-gray-200 rounded-md hover:bg-gray-100 transition-colors\"\n            >\n              <TrendingUp className=\"w-4 h-4 mr-2\" />\n              Analysis & insights\n            </Link>\n            <Link \n              href=\"/methodology\" \n              className=\"inline-flex items-center px-4 py-2 text-sm font-medium text-gray-700 bg-gray-50 border border-gray-200 rounded-md hover:bg-gray-100 transition-colors\"\n            >\n              <Map className=\"w-4 h-4 mr-2\" />\n              How this works\n            </Link>\n          </div>\n        </div>\n      </section>\n\n      {/* About section */}\n      <section className=\"bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 py-8\">\n          <div className=\"max-w-3xl\">\n            <h2 className=\"text-lg font-semibold text-gray-900 mb-4\">About this forecast</h2>\n            <p className=\"text-gray-600 leading-relaxed mb-4\">\n              This election model combines polling data, historical voting patterns, and demographic \n              information to project likely outcomes for Portugal's parliamentary elections. The forecast \n              is updated regularly as new data becomes available.\n            </p>\n            <div className=\"flex items-center gap-6 text-sm text-gray-500\">\n              <div className=\"flex items-center gap-2\">\n                <Users className=\"w-4 h-4\" />\n                <span>{seatData.length.toLocaleString()} simulations</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <TrendingUp className=\"w-4 h-4\" />\n                <span>Based on {nationalTrends.length} polling data points</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}"],"names":[],"mappings":"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","debugId":null}}]
}