{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 28, "column": 0}, "map": {"version":3,"sources":["file:///Users/bernardo/estimador-web/src/lib/config/colors.ts"],"sourcesContent":["export const partyColors = {\n  \"AD\": \"#FF8C00\",  // Dark Orange\n  \"PS\": \"#E57373\",  // Muted Pink\n  \"CH\": \"#377EB8\",  // Blue\n  \"IL\": \"#A6CEE3\",  // Light Blue \n  \"BE\": \"#000000\",  // Black\n  \"CDU\": \"#E41A1C\", // Red\n  \"L\":  \"#90EE90\",  // Light Green\n  \"PAN\": \"#4CAF50\", // Green for PAN\n  \"OTH\": \"#A65628\"  // Brown\n};\n\nexport const partyOrder = [\"AD\", \"PS\", \"CH\", \"IL\", \"BE\", \"CDU\", \"L\", \"PAN\", \"OTH\"];\n\nexport const partyNames = {\n  \"AD\": \"Aliança Democrática\",\n  \"PS\": \"Partido Socialista\", \n  \"CH\": \"Chega\",\n  \"IL\": \"Iniciativa Liberal\",\n  \"BE\": \"Bloco de Esquerda\",\n  \"CDU\": \"CDU\",\n  \"L\": \"Livre\",\n  \"PAN\": \"PAN\",\n  \"OTH\": \"Others\"\n};"],"names":[],"mappings":";;;;;;;;AAAO,MAAM,cAAc;IACzB,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,OAAO;IACP,KAAM;IACN,OAAO;IACP,OAAO,UAAW,QAAQ;AAC5B;AAEO,MAAM,aAAa;IAAC;IAAM;IAAM;IAAM;IAAM;IAAM;IAAO;IAAK;IAAO;CAAM;AAE3E,MAAM,aAAa;IACxB,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,OAAO;IACP,KAAK;IACL,OAAO;IACP,OAAO;AACT","debugId":null}},
    {"offset": {"line": 73, "column": 0}, "map": {"version":3,"sources":["file:///Users/bernardo/estimador-web/src/components/charts/PollingChart.tsx"],"sourcesContent":["\"use client\";\n\nimport * as Plot from \"@observablehq/plot\";\nimport { useEffect, useRef } from \"react\";\nimport { partyColors } from \"@/lib/config/colors\";\n\ninterface TrendData {\n  date: string;\n  party: string;\n  metric: string;\n  value: number;\n}\n\ninterface PollingChartProps {\n  data: TrendData[];\n  height?: number;\n}\n\nexport function PollingChart({ data, height = 300 }: PollingChartProps) {\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (!data || data.length === 0) return;\n\n    // Filter for vote share data only\n    const voteShareData = data.filter(d => d.metric === 'vote_share_mean');\n    \n    const plot = Plot.plot({\n      height,\n      marginLeft: 60,\n      marginRight: 80,\n      marginTop: 20,\n      marginBottom: 40,\n      style: {\n        backgroundColor: \"transparent\",\n        fontSize: \"12px\",\n        fontFamily: \"Inter, system-ui, sans-serif\"\n      },\n      x: {\n        type: \"time\",\n        label: null,\n        tickFormat: \"%b %Y\",\n        grid: true,\n        ticks: 4\n      },\n      y: {\n        label: \"Vote share (%)\",\n        domain: [0, 0.5],\n        tickFormat: d => `${(d * 100).toFixed(0)}%`,\n        grid: true\n      },\n      color: {\n        type: \"categorical\",\n        domain: Object.keys(partyColors),\n        range: Object.values(partyColors)\n      },\n      marks: [\n        // Background grid\n        Plot.gridY({ stroke: \"#f3f4f6\", strokeWidth: 1 }),\n        Plot.gridX({ stroke: \"#f3f4f6\", strokeWidth: 1 }),\n        \n        // Lines for each party\n        Plot.line(voteShareData, {\n          x: d => new Date(d.date),\n          y: \"value\",\n          stroke: \"party\",\n          strokeWidth: 2.5,\n          curve: \"catmull-rom\"\n        }),\n        \n        // Points for latest values\n        Plot.dot(voteShareData.filter(d => {\n          const maxDate = new Date(Math.max(...voteShareData.map(dd => new Date(dd.date).getTime())));\n          return new Date(d.date).getTime() === maxDate.getTime();\n        }), {\n          x: d => new Date(d.date),\n          y: \"value\",\n          fill: \"party\",\n          r: 4,\n          stroke: \"white\",\n          strokeWidth: 2\n        }),\n        \n        // Party labels at the end\n        Plot.text(voteShareData.filter(d => {\n          const maxDate = new Date(Math.max(...voteShareData.map(dd => new Date(dd.date).getTime())));\n          return new Date(d.date).getTime() === maxDate.getTime();\n        }), {\n          x: d => new Date(d.date),\n          y: \"value\",\n          text: d => `${d.party} ${(d.value * 100).toFixed(1)}%`,\n          fill: \"party\",\n          dx: 10,\n          fontSize: 11,\n          fontWeight: \"500\"\n        })\n      ]\n    });\n\n    if (containerRef.current) {\n      containerRef.current.replaceChildren(plot);\n    }\n\n    return () => plot.remove();\n  }, [data, height]);\n\n  return (\n    <div className=\"w-full\">\n      <div ref={containerRef} />\n    </div>\n  );\n}"],"names":[],"mappings":";;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAJA;;;;;AAkBO,SAAS,aAAa,EAAE,IAAI,EAAE,SAAS,GAAG,EAAqB;IACpE,MAAM,eAAe,IAAA,+MAAM,EAAiB;IAE5C,IAAA,kNAAS,EAAC;QACR,IAAI,CAAC,QAAQ,KAAK,MAAM,KAAK,GAAG;QAEhC,kCAAkC;QAClC,MAAM,gBAAgB,KAAK,MAAM,CAAC,CAAA,IAAK,EAAE,MAAM,KAAK;QAEpD,MAAM,OAAO,6JAAS,CAAC;YACrB;YACA,YAAY;YACZ,aAAa;YACb,WAAW;YACX,cAAc;YACd,OAAO;gBACL,iBAAiB;gBACjB,UAAU;gBACV,YAAY;YACd;YACA,GAAG;gBACD,MAAM;gBACN,OAAO;gBACP,YAAY;gBACZ,MAAM;gBACN,OAAO;YACT;YACA,GAAG;gBACD,OAAO;gBACP,QAAQ;oBAAC;oBAAG;iBAAI;gBAChB,YAAY,CAAA,IAAK,GAAG,CAAC,IAAI,GAAG,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;gBAC3C,MAAM;YACR;YACA,OAAO;gBACL,MAAM;gBACN,QAAQ,OAAO,IAAI,CAAC,6IAAW;gBAC/B,OAAO,OAAO,MAAM,CAAC,6IAAW;YAClC;YACA,OAAO;gBACL,kBAAkB;gBAClB,uKAAU,CAAC;oBAAE,QAAQ;oBAAW,aAAa;gBAAE;gBAC/C,uKAAU,CAAC;oBAAE,QAAQ;oBAAW,aAAa;gBAAE;gBAE/C,uBAAuB;gBACvB,sKAAS,CAAC,eAAe;oBACvB,GAAG,CAAA,IAAK,IAAI,KAAK,EAAE,IAAI;oBACvB,GAAG;oBACH,QAAQ;oBACR,aAAa;oBACb,OAAO;gBACT;gBAEA,2BAA2B;gBAC3B,oKAAQ,CAAC,cAAc,MAAM,CAAC,CAAA;oBAC5B,MAAM,UAAU,IAAI,KAAK,KAAK,GAAG,IAAI,cAAc,GAAG,CAAC,CAAA,KAAM,IAAI,KAAK,GAAG,IAAI,EAAE,OAAO;oBACtF,OAAO,IAAI,KAAK,EAAE,IAAI,EAAE,OAAO,OAAO,QAAQ,OAAO;gBACvD,IAAI;oBACF,GAAG,CAAA,IAAK,IAAI,KAAK,EAAE,IAAI;oBACvB,GAAG;oBACH,MAAM;oBACN,GAAG;oBACH,QAAQ;oBACR,aAAa;gBACf;gBAEA,0BAA0B;gBAC1B,sKAAS,CAAC,cAAc,MAAM,CAAC,CAAA;oBAC7B,MAAM,UAAU,IAAI,KAAK,KAAK,GAAG,IAAI,cAAc,GAAG,CAAC,CAAA,KAAM,IAAI,KAAK,GAAG,IAAI,EAAE,OAAO;oBACtF,OAAO,IAAI,KAAK,EAAE,IAAI,EAAE,OAAO,OAAO,QAAQ,OAAO;gBACvD,IAAI;oBACF,GAAG,CAAA,IAAK,IAAI,KAAK,EAAE,IAAI;oBACvB,GAAG;oBACH,MAAM,CAAA,IAAK,GAAG,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,GAAG,GAAG,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;oBACtD,MAAM;oBACN,IAAI;oBACJ,UAAU;oBACV,YAAY;gBACd;aACD;QACH;QAEA,IAAI,aAAa,OAAO,EAAE;YACxB,aAAa,OAAO,CAAC,eAAe,CAAC;QACvC;QAEA,OAAO,IAAM,KAAK,MAAM;IAC1B,GAAG;QAAC;QAAM;KAAO;IAEjB,qBACE,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YAAI,KAAK;;;;;;;;;;;AAGhB","debugId":null}},
    {"offset": {"line": 201, "column": 0}, "map": {"version":3,"sources":["file:///Users/bernardo/estimador-web/src/lib/config/blocs.ts"],"sourcesContent":["export const leftBlocParties = [\"PS\", \"BE\", \"CDU\", \"L\"];\nexport const rightBlocParties = [\"AD\", \"IL\"];\nexport const majorityThreshold = 116;\n\nexport const rightPlusParties = [\"AD\", \"IL\"];\nexport const leftPlusScenarioParties = [\"PS\", \"L\", \"PAN\", \"BE\", \"CDU\"];"],"names":[],"mappings":";;;;;;;;;;;;AAAO,MAAM,kBAAkB;IAAC;IAAM;IAAM;IAAO;CAAI;AAChD,MAAM,mBAAmB;IAAC;IAAM;CAAK;AACrC,MAAM,oBAAoB;AAE1B,MAAM,mBAAmB;IAAC;IAAM;CAAK;AACrC,MAAM,0BAA0B;IAAC;IAAM;IAAK;IAAO;IAAM;CAAM","debugId":null}},
    {"offset": {"line": 239, "column": 0}, "map": {"version":3,"sources":["file:///Users/bernardo/estimador-web/src/components/charts/SimpleCoalitionDots.tsx"],"sourcesContent":["\"use client\";\n\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport { useEffect, useRef } from \"react\";\nimport { leftBlocParties, rightBlocParties, majorityThreshold } from \"@/lib/config/blocs\";\n\ninterface SeatData {\n  [party: string]: number;\n}\n\ninterface SimpleCoalitionDotsProps {\n  data: SeatData[];\n  width?: number;\n  height?: number;\n}\n\nexport function SimpleCoalitionDots({ data, width = 600, height = 300 }: SimpleCoalitionDotsProps) {\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (!data || data.length === 0) return;\n\n    // Calculate coalition seats for each simulation\n    const scatterData = data.slice(0, 1000).flatMap((simulation, i) => {\n      const leftSeats = leftBlocParties.reduce((sum, party) => sum + (simulation[party] || 0), 0);\n      const rightSeats = rightBlocParties.reduce((sum, party) => sum + (simulation[party] || 0), 0);\n      \n      return [\n        { x: leftSeats, y: 0.2 + (i % 50) * 0.01, coalition: \"Left\", seats: leftSeats },\n        { x: rightSeats, y: 0.8 + (i % 50) * 0.01, coalition: \"Right\", seats: rightSeats }\n      ];\n    });\n\n    console.log('SimpleCoalitionDots: Created', scatterData.length, 'points');\n    console.log('Sample:', scatterData.slice(0, 4));\n\n    const plot = Plot.plot({\n      width,\n      height,\n      marginLeft: 80,\n      marginRight: 40,\n      style: {\n        backgroundColor: \"transparent\",\n        fontSize: \"12px\",\n        fontFamily: \"Inter, system-ui, sans-serif\"\n      },\n      x: {\n        label: \"Coalition seats\",\n        domain: [40, 180],\n        grid: true\n      },\n      y: {\n        label: null,\n        domain: [0, 1],\n        axis: null\n      },\n      color: {\n        domain: [\"Left\", \"Right\"],\n        range: [\"#10b981\", \"#f59e0b\"]\n      },\n      marks: [\n        // Majority line\n        Plot.ruleX([majorityThreshold], { \n          stroke: \"#dc2626\", \n          strokeWidth: 2, \n          strokeDasharray: \"4,2\"\n        }),\n        \n        // Simple dots\n        Plot.dot(scatterData, {\n          x: \"x\",\n          y: \"y\",\n          fill: \"coalition\",\n          fillOpacity: 0.6,\n          r: 2\n        }),\n        \n        // Coalition labels\n        Plot.text([\n          { x: 60, y: 0.2, text: \"Left coalition\" },\n          { x: 60, y: 0.8, text: \"Right coalition\" }\n        ], {\n          x: \"x\",\n          y: \"y\",\n          text: \"text\",\n          fontSize: 12,\n          fontWeight: \"bold\",\n          fill: \"#374151\"\n        })\n      ]\n    });\n\n    if (containerRef.current) {\n      containerRef.current.replaceChildren(plot);\n    }\n\n    return () => plot.remove();\n  }, [data, width, height]);\n\n  return (\n    <div className=\"w-full\">\n      <div ref={containerRef} />\n    </div>\n  );\n}"],"names":[],"mappings":";;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AALA;;;;;AAiBO,SAAS,oBAAoB,EAAE,IAAI,EAAE,QAAQ,GAAG,EAAE,SAAS,GAAG,EAA4B;IAC/F,MAAM,eAAe,IAAA,+MAAM,EAAiB;IAE5C,IAAA,kNAAS,EAAC;QACR,IAAI,CAAC,QAAQ,KAAK,MAAM,KAAK,GAAG;QAEhC,gDAAgD;QAChD,MAAM,cAAc,KAAK,KAAK,CAAC,GAAG,MAAM,OAAO,CAAC,CAAC,YAAY;YAC3D,MAAM,YAAY,gJAAe,CAAC,MAAM,CAAC,CAAC,KAAK,QAAU,MAAM,CAAC,UAAU,CAAC,MAAM,IAAI,CAAC,GAAG;YACzF,MAAM,aAAa,iJAAgB,CAAC,MAAM,CAAC,CAAC,KAAK,QAAU,MAAM,CAAC,UAAU,CAAC,MAAM,IAAI,CAAC,GAAG;YAE3F,OAAO;gBACL;oBAAE,GAAG;oBAAW,GAAG,MAAM,AAAC,IAAI,KAAM;oBAAM,WAAW;oBAAQ,OAAO;gBAAU;gBAC9E;oBAAE,GAAG;oBAAY,GAAG,MAAM,AAAC,IAAI,KAAM;oBAAM,WAAW;oBAAS,OAAO;gBAAW;aAClF;QACH;QAEA,QAAQ,GAAG,CAAC,gCAAgC,YAAY,MAAM,EAAE;QAChE,QAAQ,GAAG,CAAC,WAAW,YAAY,KAAK,CAAC,GAAG;QAE5C,MAAM,OAAO,6JAAS,CAAC;YACrB;YACA;YACA,YAAY;YACZ,aAAa;YACb,OAAO;gBACL,iBAAiB;gBACjB,UAAU;gBACV,YAAY;YACd;YACA,GAAG;gBACD,OAAO;gBACP,QAAQ;oBAAC;oBAAI;iBAAI;gBACjB,MAAM;YACR;YACA,GAAG;gBACD,OAAO;gBACP,QAAQ;oBAAC;oBAAG;iBAAE;gBACd,MAAM;YACR;YACA,OAAO;gBACL,QAAQ;oBAAC;oBAAQ;iBAAQ;gBACzB,OAAO;oBAAC;oBAAW;iBAAU;YAC/B;YACA,OAAO;gBACL,gBAAgB;gBAChB,uKAAU,CAAC;oBAAC,kJAAiB;iBAAC,EAAE;oBAC9B,QAAQ;oBACR,aAAa;oBACb,iBAAiB;gBACnB;gBAEA,cAAc;gBACd,oKAAQ,CAAC,aAAa;oBACpB,GAAG;oBACH,GAAG;oBACH,MAAM;oBACN,aAAa;oBACb,GAAG;gBACL;gBAEA,mBAAmB;gBACnB,sKAAS,CAAC;oBACR;wBAAE,GAAG;wBAAI,GAAG;wBAAK,MAAM;oBAAiB;oBACxC;wBAAE,GAAG;wBAAI,GAAG;wBAAK,MAAM;oBAAkB;iBAC1C,EAAE;oBACD,GAAG;oBACH,GAAG;oBACH,MAAM;oBACN,UAAU;oBACV,YAAY;oBACZ,MAAM;gBACR;aACD;QACH;QAEA,IAAI,aAAa,OAAO,EAAE;YACxB,aAAa,OAAO,CAAC,eAAe,CAAC;QACvC;QAEA,OAAO,IAAM,KAAK,MAAM;IAC1B,GAAG;QAAC;QAAM;QAAO;KAAO;IAExB,qBACE,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YAAI,KAAK;;;;;;;;;;;AAGhB","debugId":null}}]
}