{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/bernardo/estimador-web/src/lib/config/colors.ts"],"sourcesContent":["export const partyColors = {\n  \"AD\": \"#FF8C00\",  // Dark Orange\n  \"PS\": \"#E57373\",  // Muted Pink\n  \"CH\": \"#377EB8\",  // Blue\n  \"IL\": \"#A6CEE3\",  // Light Blue \n  \"BE\": \"#000000\",  // Black\n  \"CDU\": \"#E41A1C\", // Red\n  \"L\":  \"#90EE90\",  // Light Green\n  \"PAN\": \"#4CAF50\", // Green for PAN\n  \"OTH\": \"#A65628\"  // Brown\n};\n\nexport const partyOrder = [\"AD\", \"PS\", \"CH\", \"IL\", \"BE\", \"CDU\", \"L\", \"PAN\", \"OTH\"];\n\nexport const partyNames = {\n  \"AD\": \"Aliança Democrática\",\n  \"PS\": \"Partido Socialista\", \n  \"CH\": \"Chega\",\n  \"IL\": \"Iniciativa Liberal\",\n  \"BE\": \"Bloco de Esquerda\",\n  \"CDU\": \"CDU\",\n  \"L\": \"Livre\",\n  \"PAN\": \"PAN\",\n  \"OTH\": \"Others\"\n};"],"names":[],"mappings":";;;;;;;;AAAO,MAAM,cAAc;IACzB,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,OAAO;IACP,KAAM;IACN,OAAO;IACP,OAAO,UAAW,QAAQ;AAC5B;AAEO,MAAM,aAAa;IAAC;IAAM;IAAM;IAAM;IAAM;IAAM;IAAO;IAAK;IAAO;CAAM;AAE3E,MAAM,aAAa;IACxB,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,OAAO;IACP,KAAK;IACL,OAAO;IACP,OAAO;AACT","debugId":null}},
    {"offset": {"line": 52, "column": 0}, "map": {"version":3,"sources":["file:///Users/bernardo/estimador-web/src/components/charts/PollingChart.tsx"],"sourcesContent":["\"use client\";\n\nimport * as Plot from \"@observablehq/plot\";\nimport { useEffect, useRef } from \"react\";\nimport { partyColors } from \"@/lib/config/colors\";\n\ninterface TrendData {\n  date: string;\n  party: string;\n  metric: string;\n  value: number;\n}\n\ninterface PollingChartProps {\n  data: TrendData[];\n}\n\nexport function PollingChart({ data }: PollingChartProps) {\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (!data || data.length === 0 || !containerRef.current) return;\n\n    // Get actual container width for truly responsive sizing\n    const containerWidth = containerRef.current.offsetWidth || 900;\n    const containerHeight = 450; // Good height for the space\n\n    // Filter for vote share data only\n    const voteShareData = data.filter(d => d.metric === 'vote_share_mean');\n    \n    // Filter to recent time period - show all parties\n    const cutoffDate = new Date();\n    cutoffDate.setFullYear(cutoffDate.getFullYear() - 2); // Last 2 years only\n    \n    const filteredData = voteShareData.filter(d => new Date(d.date) >= cutoffDate);\n    \n    // Get latest values for all parties\n    const latestData = filteredData\n      .filter(d => {\n        const maxDate = new Date(Math.max(...filteredData.map(dd => new Date(dd.date).getTime())));\n        return new Date(d.date).getTime() === maxDate.getTime();\n      })\n      .sort((a, b) => b.value - a.value);\n    \n    const plot = Plot.plot({\n      width: containerWidth,\n      height: containerHeight,\n      marginLeft: 60,\n      marginRight: 120, // Space for labels\n      marginTop: 20,\n      marginBottom: 50, // Reasonable space for x-axis labels\n      style: {\n        backgroundColor: \"transparent\",\n        fontSize: \"12px\",\n        fontFamily: \"Inter, system-ui, sans-serif\"\n      },\n      x: {\n        type: \"time\",\n        label: null,\n        tickFormat: \"%b %Y\",\n        grid: true,\n        ticks: 4\n      },\n      y: {\n        label: \"Vote share (%)\",\n        domain: [0, 0.5],\n        tickFormat: d => `${(d * 100).toFixed(0)}%`,\n        grid: true\n      },\n      color: {\n        type: \"categorical\",\n        domain: Object.keys(partyColors),\n        range: Object.values(partyColors)\n      },\n      marks: [\n        // Background grid\n        Plot.gridY({ stroke: \"#f3f4f6\", strokeWidth: 1 }),\n        Plot.gridX({ stroke: \"#f3f4f6\", strokeWidth: 1 }),\n        \n        // Lines for each party\n        Plot.line(filteredData, {\n          x: d => new Date(d.date),\n          y: \"value\",\n          stroke: \"party\",\n          strokeWidth: 2.5,\n          curve: \"catmull-rom\"\n        }),\n        \n        // Points for latest values\n        Plot.dot(latestData, {\n          x: d => new Date(d.date),\n          y: \"value\",\n          fill: \"party\",\n          r: 4,\n          stroke: \"white\",\n          strokeWidth: 2\n        }),\n        \n        // Major parties - label at line end\n        Plot.text(latestData.filter(d => d.value > 0.1), {\n          x: d => new Date(d.date),\n          y: \"value\",\n          text: d => `${d.party} ${(d.value * 100).toFixed(1)}%`,\n          fill: \"party\",\n          dx: 8,\n          fontSize: 11,\n          fontWeight: \"600\",\n          textAnchor: \"start\"\n        }),\n        \n        // Minor parties - sorted bottom to top to match visual order\n        Plot.text(latestData.filter(d => d.value <= 0.1).sort((a, b) => a.value - b.value), Plot.dodgeY({\n          x: d => new Date(d.date),\n          y: \"value\",\n          text: d => `${d.party} ${(d.value * 100).toFixed(1)}%`,\n          fill: \"party\",\n          dx: 8,\n          dy: -3, // Move labels slightly up\n          fontSize: 10,\n          fontWeight: \"500\",\n          textAnchor: \"start\",\n          padding: 4 // Increase spacing between dodged labels\n        }))\n      ]\n    });\n\n    if (containerRef.current) {\n      containerRef.current.replaceChildren(plot);\n    }\n\n    return () => plot.remove();\n  }, [data]);\n\n  // Add resize observer for responsive behavior\n  useEffect(() => {\n    if (!containerRef.current) return;\n    \n    const resizeObserver = new ResizeObserver(() => {\n      // Re-render chart when container size changes\n      if (containerRef.current && data && data.length > 0) {\n        // Small delay to ensure container has final dimensions\n        setTimeout(() => {\n          if (!containerRef.current) return;\n          \n          const containerWidth = containerRef.current.offsetWidth || 900;\n          const containerHeight = 450;\n\n          // Filter for vote share data only\n          const voteShareData = data.filter(d => d.metric === 'vote_share_mean');\n          \n          // Filter to recent time period - show all parties\n          const cutoffDate = new Date();\n          cutoffDate.setFullYear(cutoffDate.getFullYear() - 2);\n          \n          const filteredData = voteShareData.filter(d => new Date(d.date) >= cutoffDate);\n          \n          // Get latest values for all parties\n          const latestData = filteredData\n            .filter(d => {\n              const maxDate = new Date(Math.max(...filteredData.map(dd => new Date(dd.date).getTime())));\n              return new Date(d.date).getTime() === maxDate.getTime();\n            })\n            .sort((a, b) => b.value - a.value);\n          \n          const plot = Plot.plot({\n            width: containerWidth,\n            height: containerHeight,\n            marginLeft: 60,\n            marginRight: 120,\n            marginTop: 20,\n            marginBottom: 50,\n            style: {\n              backgroundColor: \"transparent\",\n              fontSize: \"12px\",\n              fontFamily: \"Inter, system-ui, sans-serif\"\n            },\n            x: {\n              type: \"time\",\n              label: null,\n              tickFormat: \"%b %Y\",\n              grid: true,\n              ticks: 4\n            },\n            y: {\n              label: \"Vote share (%)\",\n              domain: [0, 0.5],\n              tickFormat: d => `${(d * 100).toFixed(0)}%`,\n              grid: true\n            },\n            color: {\n              type: \"categorical\",\n              domain: Object.keys(partyColors),\n              range: Object.values(partyColors)\n            },\n            marks: [\n              Plot.gridY({ stroke: \"#f3f4f6\", strokeWidth: 1 }),\n              Plot.gridX({ stroke: \"#f3f4f6\", strokeWidth: 1 }),\n              \n              Plot.line(filteredData, {\n                x: d => new Date(d.date),\n                y: \"value\",\n                stroke: \"party\",\n                strokeWidth: 2.5,\n                curve: \"catmull-rom\"\n              }),\n              \n              Plot.dot(latestData, {\n                x: d => new Date(d.date),\n                y: \"value\",\n                fill: \"party\",\n                r: 4,\n                stroke: \"white\",\n                strokeWidth: 2\n              }),\n              \n              Plot.text(latestData.filter(d => d.value > 0.1), {\n                x: d => new Date(d.date),\n                y: \"value\",\n                text: d => `${d.party} ${(d.value * 100).toFixed(1)}%`,\n                fill: \"party\",\n                dx: 8,\n                fontSize: 11,\n                fontWeight: \"600\",\n                textAnchor: \"start\"\n              }),\n              \n              Plot.text(latestData.filter(d => d.value <= 0.1).sort((a, b) => a.value - b.value), Plot.dodgeY({\n                x: d => new Date(d.date),\n                y: \"value\",\n                text: d => `${d.party} ${(d.value * 100).toFixed(1)}%`,\n                fill: \"party\",\n                dx: 8,\n                dy: -3,\n                fontSize: 10,\n                fontWeight: \"500\",\n                textAnchor: \"start\",\n                padding: 4\n              }))\n            ]\n          });\n\n          containerRef.current.replaceChildren(plot);\n        }, 100);\n      }\n    });\n    \n    resizeObserver.observe(containerRef.current);\n    \n    return () => resizeObserver.disconnect();\n  }, [data]);\n\n  return (\n    <div className=\"w-full\">\n      <div ref={containerRef} className=\"overflow-x-auto\" />\n    </div>\n  );\n}"],"names":[],"mappings":";;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;AAJA;;;;AAiBO,SAAS,aAAa,KAA2B;QAA3B,EAAE,IAAI,EAAqB,GAA3B;;IAC3B,MAAM,eAAe,IAAA,uKAAM,EAAiB;IAE5C,IAAA,0KAAS;kCAAC;YACR,IAAI,CAAC,QAAQ,KAAK,MAAM,KAAK,KAAK,CAAC,aAAa,OAAO,EAAE;YAEzD,yDAAyD;YACzD,MAAM,iBAAiB,aAAa,OAAO,CAAC,WAAW,IAAI;YAC3D,MAAM,kBAAkB,KAAK,4BAA4B;YAEzD,kCAAkC;YAClC,MAAM,gBAAgB,KAAK,MAAM;wDAAC,CAAA,IAAK,EAAE,MAAM,KAAK;;YAEpD,kDAAkD;YAClD,MAAM,aAAa,IAAI;YACvB,WAAW,WAAW,CAAC,WAAW,WAAW,KAAK,IAAI,oBAAoB;YAE1E,MAAM,eAAe,cAAc,MAAM;uDAAC,CAAA,IAAK,IAAI,KAAK,EAAE,IAAI,KAAK;;YAEnE,oCAAoC;YACpC,MAAM,aAAa,aAChB,MAAM;qDAAC,CAAA;oBACN,MAAM,UAAU,IAAI,KAAK,KAAK,GAAG,IAAI,aAAa,GAAG;6DAAC,CAAA,KAAM,IAAI,KAAK,GAAG,IAAI,EAAE,OAAO;;oBACrF,OAAO,IAAI,KAAK,EAAE,IAAI,EAAE,OAAO,OAAO,QAAQ,OAAO;gBACvD;oDACC,IAAI;qDAAC,CAAC,GAAG,IAAM,EAAE,KAAK,GAAG,EAAE,KAAK;;YAEnC,MAAM,OAAO,gKAAS,CAAC;gBACrB,OAAO;gBACP,QAAQ;gBACR,YAAY;gBACZ,aAAa;gBACb,WAAW;gBACX,cAAc;gBACd,OAAO;oBACL,iBAAiB;oBACjB,UAAU;oBACV,YAAY;gBACd;gBACA,GAAG;oBACD,MAAM;oBACN,OAAO;oBACP,YAAY;oBACZ,MAAM;oBACN,OAAO;gBACT;gBACA,GAAG;oBACD,OAAO;oBACP,QAAQ;wBAAC;wBAAG;qBAAI;oBAChB,UAAU;uDAAE,CAAA,IAAK,AAAC,GAAuB,OAArB,CAAC,IAAI,GAAG,EAAE,OAAO,CAAC,IAAG;;oBACzC,MAAM;gBACR;gBACA,OAAO;oBACL,MAAM;oBACN,QAAQ,OAAO,IAAI,CAAC,gJAAW;oBAC/B,OAAO,OAAO,MAAM,CAAC,gJAAW;gBAClC;gBACA,OAAO;oBACL,kBAAkB;oBAClB,0KAAU,CAAC;wBAAE,QAAQ;wBAAW,aAAa;oBAAE;oBAC/C,0KAAU,CAAC;wBAAE,QAAQ;wBAAW,aAAa;oBAAE;oBAE/C,uBAAuB;oBACvB,yKAAS,CAAC,cAAc;wBACtB,CAAC;2DAAE,CAAA,IAAK,IAAI,KAAK,EAAE,IAAI;;wBACvB,GAAG;wBACH,QAAQ;wBACR,aAAa;wBACb,OAAO;oBACT;oBAEA,2BAA2B;oBAC3B,uKAAQ,CAAC,YAAY;wBACnB,CAAC;2DAAE,CAAA,IAAK,IAAI,KAAK,EAAE,IAAI;;wBACvB,GAAG;wBACH,MAAM;wBACN,GAAG;wBACH,QAAQ;wBACR,aAAa;oBACf;oBAEA,oCAAoC;oBACpC,yKAAS,CAAC,WAAW,MAAM;uDAAC,CAAA,IAAK,EAAE,KAAK,GAAG;uDAAM;wBAC/C,CAAC;2DAAE,CAAA,IAAK,IAAI,KAAK,EAAE,IAAI;;wBACvB,GAAG;wBACH,IAAI;2DAAE,CAAA,IAAK,AAAC,GAAa,OAAX,EAAE,KAAK,EAAC,KAA8B,OAA3B,CAAC,EAAE,KAAK,GAAG,GAAG,EAAE,OAAO,CAAC,IAAG;;wBACpD,MAAM;wBACN,IAAI;wBACJ,UAAU;wBACV,YAAY;wBACZ,YAAY;oBACd;oBAEA,6DAA6D;oBAC7D,yKAAS,CAAC,WAAW,MAAM;uDAAC,CAAA,IAAK,EAAE,KAAK,IAAI;sDAAK,IAAI;uDAAC,CAAC,GAAG,IAAM,EAAE,KAAK,GAAG,EAAE,KAAK;uDAAG,iLAAW,CAAC;wBAC9F,CAAC;2DAAE,CAAA,IAAK,IAAI,KAAK,EAAE,IAAI;;wBACvB,GAAG;wBACH,IAAI;2DAAE,CAAA,IAAK,AAAC,GAAa,OAAX,EAAE,KAAK,EAAC,KAA8B,OAA3B,CAAC,EAAE,KAAK,GAAG,GAAG,EAAE,OAAO,CAAC,IAAG;;wBACpD,MAAM;wBACN,IAAI;wBACJ,IAAI,CAAC;wBACL,UAAU;wBACV,YAAY;wBACZ,YAAY;wBACZ,SAAS,EAAE,yCAAyC;oBACtD;iBACD;YACH;YAEA,IAAI,aAAa,OAAO,EAAE;gBACxB,aAAa,OAAO,CAAC,eAAe,CAAC;YACvC;YAEA;0CAAO,IAAM,KAAK,MAAM;;QAC1B;iCAAG;QAAC;KAAK;IAET,8CAA8C;IAC9C,IAAA,0KAAS;kCAAC;YACR,IAAI,CAAC,aAAa,OAAO,EAAE;YAE3B,MAAM,iBAAiB,IAAI;0CAAe;oBACxC,8CAA8C;oBAC9C,IAAI,aAAa,OAAO,IAAI,QAAQ,KAAK,MAAM,GAAG,GAAG;wBACnD,uDAAuD;wBACvD;sDAAW;gCACT,IAAI,CAAC,aAAa,OAAO,EAAE;gCAE3B,MAAM,iBAAiB,aAAa,OAAO,CAAC,WAAW,IAAI;gCAC3D,MAAM,kBAAkB;gCAExB,kCAAkC;gCAClC,MAAM,gBAAgB,KAAK,MAAM;4EAAC,CAAA,IAAK,EAAE,MAAM,KAAK;;gCAEpD,kDAAkD;gCAClD,MAAM,aAAa,IAAI;gCACvB,WAAW,WAAW,CAAC,WAAW,WAAW,KAAK;gCAElD,MAAM,eAAe,cAAc,MAAM;2EAAC,CAAA,IAAK,IAAI,KAAK,EAAE,IAAI,KAAK;;gCAEnE,oCAAoC;gCACpC,MAAM,aAAa,aAChB,MAAM;yEAAC,CAAA;wCACN,MAAM,UAAU,IAAI,KAAK,KAAK,GAAG,IAAI,aAAa,GAAG;iFAAC,CAAA,KAAM,IAAI,KAAK,GAAG,IAAI,EAAE,OAAO;;wCACrF,OAAO,IAAI,KAAK,EAAE,IAAI,EAAE,OAAO,OAAO,QAAQ,OAAO;oCACvD;wEACC,IAAI;yEAAC,CAAC,GAAG,IAAM,EAAE,KAAK,GAAG,EAAE,KAAK;;gCAEnC,MAAM,OAAO,gKAAS,CAAC;oCACrB,OAAO;oCACP,QAAQ;oCACR,YAAY;oCACZ,aAAa;oCACb,WAAW;oCACX,cAAc;oCACd,OAAO;wCACL,iBAAiB;wCACjB,UAAU;wCACV,YAAY;oCACd;oCACA,GAAG;wCACD,MAAM;wCACN,OAAO;wCACP,YAAY;wCACZ,MAAM;wCACN,OAAO;oCACT;oCACA,GAAG;wCACD,OAAO;wCACP,QAAQ;4CAAC;4CAAG;yCAAI;wCAChB,UAAU;2EAAE,CAAA,IAAK,AAAC,GAAuB,OAArB,CAAC,IAAI,GAAG,EAAE,OAAO,CAAC,IAAG;;wCACzC,MAAM;oCACR;oCACA,OAAO;wCACL,MAAM;wCACN,QAAQ,OAAO,IAAI,CAAC,gJAAW;wCAC/B,OAAO,OAAO,MAAM,CAAC,gJAAW;oCAClC;oCACA,OAAO;wCACL,0KAAU,CAAC;4CAAE,QAAQ;4CAAW,aAAa;wCAAE;wCAC/C,0KAAU,CAAC;4CAAE,QAAQ;4CAAW,aAAa;wCAAE;wCAE/C,yKAAS,CAAC,cAAc;4CACtB,CAAC;+EAAE,CAAA,IAAK,IAAI,KAAK,EAAE,IAAI;;4CACvB,GAAG;4CACH,QAAQ;4CACR,aAAa;4CACb,OAAO;wCACT;wCAEA,uKAAQ,CAAC,YAAY;4CACnB,CAAC;+EAAE,CAAA,IAAK,IAAI,KAAK,EAAE,IAAI;;4CACvB,GAAG;4CACH,MAAM;4CACN,GAAG;4CACH,QAAQ;4CACR,aAAa;wCACf;wCAEA,yKAAS,CAAC,WAAW,MAAM;2EAAC,CAAA,IAAK,EAAE,KAAK,GAAG;2EAAM;4CAC/C,CAAC;+EAAE,CAAA,IAAK,IAAI,KAAK,EAAE,IAAI;;4CACvB,GAAG;4CACH,IAAI;+EAAE,CAAA,IAAK,AAAC,GAAa,OAAX,EAAE,KAAK,EAAC,KAA8B,OAA3B,CAAC,EAAE,KAAK,GAAG,GAAG,EAAE,OAAO,CAAC,IAAG;;4CACpD,MAAM;4CACN,IAAI;4CACJ,UAAU;4CACV,YAAY;4CACZ,YAAY;wCACd;wCAEA,yKAAS,CAAC,WAAW,MAAM;2EAAC,CAAA,IAAK,EAAE,KAAK,IAAI;0EAAK,IAAI;2EAAC,CAAC,GAAG,IAAM,EAAE,KAAK,GAAG,EAAE,KAAK;2EAAG,iLAAW,CAAC;4CAC9F,CAAC;+EAAE,CAAA,IAAK,IAAI,KAAK,EAAE,IAAI;;4CACvB,GAAG;4CACH,IAAI;+EAAE,CAAA,IAAK,AAAC,GAAa,OAAX,EAAE,KAAK,EAAC,KAA8B,OAA3B,CAAC,EAAE,KAAK,GAAG,GAAG,EAAE,OAAO,CAAC,IAAG;;4CACpD,MAAM;4CACN,IAAI;4CACJ,IAAI,CAAC;4CACL,UAAU;4CACV,YAAY;4CACZ,YAAY;4CACZ,SAAS;wCACX;qCACD;gCACH;gCAEA,aAAa,OAAO,CAAC,eAAe,CAAC;4BACvC;qDAAG;oBACL;gBACF;;YAEA,eAAe,OAAO,CAAC,aAAa,OAAO;YAE3C;0CAAO,IAAM,eAAe,UAAU;;QACxC;iCAAG;QAAC;KAAK;IAET,qBACE,6LAAC;QAAI,WAAU;kBACb,cAAA,6LAAC;YAAI,KAAK;YAAc,WAAU;;;;;;;;;;;AAGxC;GA/OgB;KAAA","debugId":null}},
    {"offset": {"line": 396, "column": 0}, "map": {"version":3,"sources":["file:///Users/bernardo/estimador-web/src/lib/config/blocs.ts"],"sourcesContent":["export const leftBlocParties = [\"PS\", \"BE\", \"CDU\", \"L\"];\nexport const rightBlocParties = [\"AD\", \"IL\"];\nexport const majorityThreshold = 116;\n\nexport const rightPlusParties = [\"AD\", \"IL\"];\nexport const leftPlusScenarioParties = [\"PS\", \"L\", \"PAN\", \"BE\", \"CDU\"];"],"names":[],"mappings":";;;;;;;;;;;;AAAO,MAAM,kBAAkB;IAAC;IAAM;IAAM;IAAO;CAAI;AAChD,MAAM,mBAAmB;IAAC;IAAM;CAAK;AACrC,MAAM,oBAAoB;AAE1B,MAAM,mBAAmB;IAAC;IAAM;CAAK;AACrC,MAAM,0BAA0B;IAAC;IAAM;IAAK;IAAO;IAAM;CAAM","debugId":null}},
    {"offset": {"line": 437, "column": 0}, "map": {"version":3,"sources":["file:///Users/bernardo/estimador-web/src/components/charts/CoalitionDotPlot.tsx"],"sourcesContent":["\"use client\";\n\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport { useEffect, useRef } from \"react\";\nimport { leftBlocParties, rightBlocParties, majorityThreshold } from \"@/lib/config/blocs\";\n\ninterface SeatData {\n  [party: string]: number;\n}\n\ninterface CoalitionDotPlotProps {\n  data: SeatData[];\n}\n\nexport function CoalitionDotPlot({ data }: CoalitionDotPlotProps) {\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (!data || data.length === 0 || !containerRef.current) {\n      console.log(\"CoalitionDotPlot: No data available\");\n      return;\n    }\n    \n    // Get actual container width for responsive sizing\n    const containerWidth = containerRef.current.offsetWidth || 1000;\n    const containerHeight = 350;\n    \n    console.log(`CoalitionDotPlot: Processing ${data.length} data points, container width: ${containerWidth}`);\n    console.log('First 3 data points:', data.slice(0, 3));\n\n    // Calculate coalition seats for each simulation\n    const blocDrawData = data.flatMap((simulation, index) => {\n      const leftSeats = leftBlocParties.reduce((sum, party) => sum + (simulation[party] || 0), 0);\n      const rightSeats = rightBlocParties.reduce((sum, party) => sum + (simulation[party] || 0), 0);\n      \n      return [\n        { draw: index, bloc: \"Left coalition\", totalSeats: leftSeats },\n        { draw: index, bloc: \"Right coalition\", totalSeats: rightSeats }\n      ];\n    });\n\n    // Calculate medians\n    const blocMedians = Array.from(\n      d3.rollup(blocDrawData, v => d3.median(v, d => d.totalSeats), d => d.bloc),\n      ([bloc, medianSeats]) => ({ bloc, medianSeats })\n    );\n\n    // Sample data for performance - increase for better density\n    const sampleSize = Math.min(1600, blocDrawData.length);\n    const sampledData = d3.shuffle(blocDrawData.slice()).slice(0, sampleSize);\n    \n    console.log(`CoalitionDotPlot: ${blocDrawData.length} coalition data points, sampling ${sampledData.length}`);\n    console.log('Sample of blocDrawData:', blocDrawData.slice(0, 5));\n    console.log('Sample of sampledData:', sampledData.slice(0, 5));\n    console.log('Bloc medians:', blocMedians);\n\n    const plot = Plot.plot({\n      width: containerWidth,\n      height: containerHeight,\n      marginLeft: 140,\n      marginRight: 60,\n      marginTop: 30,\n      marginBottom: 50,\n      style: {\n        backgroundColor: \"transparent\",\n        fontSize: \"12px\",\n        fontFamily: \"Inter, system-ui, sans-serif\"\n      },\n      x: {\n        label: \"Projected seats\",\n        domain: [40, 140],\n        grid: true,\n        ticks: [50, 75, 100, majorityThreshold, 125]\n      },\n      fy: {\n        domain: [\"Left coalition\", \"Right coalition\"],\n        label: null,\n        axis: \"left\",\n        padding: 0.1\n      },\n      color: {\n        domain: [\"Left coalition\", \"Right coalition\"],\n        range: [\"#10b981\", \"#f59e0b\"]\n      },\n      marks: [\n        // Majority line (spans across facets)\n        Plot.ruleX([majorityThreshold], { \n          stroke: \"#dc2626\", \n          strokeWidth: 2, \n          strokeDasharray: \"4,2\",\n          facet: \"exclude\"\n        }),\n        \n        // Dodged dots with slight horizontal jitter\n        Plot.dotX(sampledData, Plot.dodgeY({\n          x: d => d.totalSeats + (Math.random() - 0.5) * 1.5, // Add small horizontal jitter\n          fy: \"bloc\",\n          fill: \"bloc\",\n          fillOpacity: 0.7,\n          r: 1.2,\n          anchor: \"middle\"\n        })),\n        \n        // Median lines\n        Plot.ruleX(blocMedians, {\n          x: \"medianSeats\",\n          fy: \"bloc\",\n          stroke: \"black\",\n          strokeWidth: 2,\n          strokeDasharray: \"2,2\"\n        }),\n        \n        // Median labels\n        Plot.text(blocMedians, {\n          x: \"medianSeats\",\n          fy: \"bloc\",\n          text: d => Math.round(d.medianSeats).toString(),\n          dy: -8,\n          dx: 5,\n          fontSize: 11,\n          fontWeight: \"bold\",\n          fill: \"black\"\n        }),\n        \n        // Majority label\n        Plot.text([{ x: majorityThreshold, fy: \"Left coalition\" }], {\n          x: \"x\",\n          fy: \"fy\",\n          text: `Majority (${majorityThreshold})`,\n          dx: 5,\n          dy: -10,\n          fontSize: 11,\n          fill: \"#dc2626\",\n          fontWeight: \"600\"\n        })\n      ]\n    });\n\n    if (containerRef.current) {\n      containerRef.current.replaceChildren(plot);\n    }\n\n    return () => plot.remove();\n  }, [data]);\n\n  // Add resize observer for responsive behavior\n  useEffect(() => {\n    if (!containerRef.current) return;\n    \n    const resizeObserver = new ResizeObserver(() => {\n      // Re-render chart when container size changes\n      if (containerRef.current && data && data.length > 0) {\n        // Small delay to ensure container has final dimensions\n        setTimeout(() => {\n          if (!containerRef.current) return;\n          \n          const containerWidth = containerRef.current.offsetWidth || 1000;\n          const containerHeight = 350;\n\n          // Calculate coalition seats for each simulation\n          const blocDrawData = data.flatMap((simulation, index) => {\n            const leftSeats = leftBlocParties.reduce((sum, party) => sum + (simulation[party] || 0), 0);\n            const rightSeats = rightBlocParties.reduce((sum, party) => sum + (simulation[party] || 0), 0);\n            \n            return [\n              { draw: index, bloc: \"Left coalition\", totalSeats: leftSeats },\n              { draw: index, bloc: \"Right coalition\", totalSeats: rightSeats }\n            ];\n          });\n\n          // Calculate medians\n          const blocMedians = Array.from(\n            d3.rollup(blocDrawData, v => d3.median(v, d => d.totalSeats), d => d.bloc),\n            ([bloc, medianSeats]) => ({ bloc, medianSeats })\n          );\n\n          // Sample data for performance\n          const sampleSize = Math.min(1600, blocDrawData.length);\n          const sampledData = d3.shuffle(blocDrawData.slice()).slice(0, sampleSize);\n\n          const plot = Plot.plot({\n            width: containerWidth,\n            height: containerHeight,\n            marginLeft: 140,\n            marginRight: 60,\n            marginTop: 30,\n            marginBottom: 50,\n            style: {\n              backgroundColor: \"transparent\",\n              fontSize: \"12px\",\n              fontFamily: \"Inter, system-ui, sans-serif\"\n            },\n            x: {\n              label: \"Projected seats\",\n              domain: [40, 140],\n              grid: true,\n              ticks: [50, 75, 100, majorityThreshold, 125]\n            },\n            fy: {\n              domain: [\"Left coalition\", \"Right coalition\"],\n              label: null,\n              axis: \"left\",\n              padding: 0.1\n            },\n            color: {\n              domain: [\"Left coalition\", \"Right coalition\"],\n              range: [\"#10b981\", \"#f59e0b\"]\n            },\n            marks: [\n              // Majority line (spans across facets)\n              Plot.ruleX([majorityThreshold], { \n                stroke: \"#dc2626\", \n                strokeWidth: 2, \n                strokeDasharray: \"4,2\",\n                facet: \"exclude\"\n              }),\n              \n              // Dodged dots with slight horizontal jitter\n              Plot.dotX(sampledData, Plot.dodgeY({\n                x: d => d.totalSeats + (Math.random() - 0.5) * 1.5, // Add small horizontal jitter\n                fy: \"bloc\",\n                fill: \"bloc\",\n                fillOpacity: 0.7,\n                r: 1.2,\n                anchor: \"middle\"\n              })),\n              \n              // Median lines\n              Plot.ruleX(blocMedians, {\n                x: \"medianSeats\",\n                fy: \"bloc\",\n                stroke: \"black\",\n                strokeWidth: 2,\n                strokeDasharray: \"2,2\"\n              }),\n              \n              // Median labels\n              Plot.text(blocMedians, {\n                x: \"medianSeats\",\n                fy: \"bloc\",\n                text: d => Math.round(d.medianSeats).toString(),\n                dy: -8,\n                dx: 5,\n                fontSize: 11,\n                fontWeight: \"bold\",\n                fill: \"black\"\n              }),\n              \n              // Majority label\n              Plot.text([{ x: majorityThreshold, fy: \"Left coalition\" }], {\n                x: \"x\",\n                fy: \"fy\",\n                text: `Majority (${majorityThreshold})`,\n                dx: 5,\n                dy: -10,\n                fontSize: 11,\n                fill: \"#dc2626\",\n                fontWeight: \"600\"\n              })\n            ]\n          });\n\n          containerRef.current.replaceChildren(plot);\n        }, 100);\n      }\n    });\n    \n    resizeObserver.observe(containerRef.current);\n    \n    return () => resizeObserver.disconnect();\n  }, [data]);\n\n  if (!data || data.length === 0) {\n    return (\n      <div className=\"w-full h-64 flex items-center justify-center text-gray-500\">\n        <p>Loading coalition data...</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"w-full\">\n      <div ref={containerRef} className=\"overflow-x-auto\" />\n      <div className=\"text-xs text-gray-500 mt-2\">\n        Showing {data.length} simulation outcomes\n      </div>\n    </div>\n  );\n}"],"names":[],"mappings":"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","debugId":null}}]
}