{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/bernardo/estimador-web/src/lib/config/colors.ts"],"sourcesContent":["export const partyColors = {\n  \"AD\": \"#FF8C00\",  // Dark Orange\n  \"PS\": \"#E57373\",  // Muted Pink\n  \"CH\": \"#377EB8\",  // Blue\n  \"IL\": \"#A6CEE3\",  // Light Blue \n  \"BE\": \"#000000\",  // Black\n  \"CDU\": \"#E41A1C\", // Red\n  \"L\":  \"#90EE90\",  // Light Green\n  \"PAN\": \"#4CAF50\", // Green for PAN\n  \"OTH\": \"#A65628\"  // Brown\n};\n\nexport const partyOrder = [\"AD\", \"PS\", \"CH\", \"IL\", \"BE\", \"CDU\", \"L\", \"PAN\", \"OTH\"];\n\nexport const partyNames = {\n  \"AD\": \"Aliança Democrática\",\n  \"PS\": \"Partido Socialista\", \n  \"CH\": \"Chega\",\n  \"IL\": \"Iniciativa Liberal\",\n  \"BE\": \"Bloco de Esquerda\",\n  \"CDU\": \"CDU\",\n  \"L\": \"Livre\",\n  \"PAN\": \"PAN\",\n  \"OTH\": \"Others\"\n};"],"names":[],"mappings":";;;;;;;;AAAO,MAAM,cAAc;IACzB,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,OAAO;IACP,KAAM;IACN,OAAO;IACP,OAAO,UAAW,QAAQ;AAC5B;AAEO,MAAM,aAAa;IAAC;IAAM;IAAM;IAAM;IAAM;IAAM;IAAO;IAAK;IAAO;CAAM;AAE3E,MAAM,aAAa;IACxB,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,OAAO;IACP,KAAK;IACL,OAAO;IACP,OAAO;AACT","debugId":null}},
    {"offset": {"line": 52, "column": 0}, "map": {"version":3,"sources":["file:///Users/bernardo/estimador-web/src/components/charts/PollingChart.tsx"],"sourcesContent":["\"use client\";\n\nimport * as Plot from \"@observablehq/plot\";\nimport { useEffect, useRef } from \"react\";\nimport { partyColors } from \"@/lib/config/colors\";\n\ninterface TrendData {\n  date: string;\n  party: string;\n  metric: string;\n  value: number;\n}\n\ninterface PollingChartProps {\n  data: TrendData[];\n}\n\nexport function PollingChart({ data }: PollingChartProps) {\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (!data || data.length === 0 || !containerRef.current) return;\n\n    // Get actual container width for truly responsive sizing\n    const containerWidth = containerRef.current.offsetWidth || 900;\n    const containerHeight = 450; // Good height for the space\n\n    // Filter for vote share data only\n    const voteShareData = data.filter(d => d.metric === 'vote_share_mean');\n    \n    // Filter to recent time period - show all parties\n    const cutoffDate = new Date();\n    cutoffDate.setFullYear(cutoffDate.getFullYear() - 2); // Last 2 years only\n    \n    const filteredData = voteShareData.filter(d => new Date(d.date) >= cutoffDate);\n    \n    // Get latest values for all parties\n    const latestData = filteredData\n      .filter(d => {\n        const maxDate = new Date(Math.max(...filteredData.map(dd => new Date(dd.date).getTime())));\n        return new Date(d.date).getTime() === maxDate.getTime();\n      })\n      .sort((a, b) => b.value - a.value);\n    \n    const plot = Plot.plot({\n      width: containerWidth,\n      height: containerHeight,\n      marginLeft: 60,\n      marginRight: 120, // Space for labels\n      marginTop: 20,\n      marginBottom: 50, // Reasonable space for x-axis labels\n      style: {\n        backgroundColor: \"transparent\",\n        fontSize: \"12px\",\n        fontFamily: \"Inter, system-ui, sans-serif\"\n      },\n      x: {\n        type: \"time\",\n        label: null,\n        tickFormat: \"%b %Y\",\n        grid: true,\n        ticks: 4\n      },\n      y: {\n        label: \"Vote share (%)\",\n        domain: [0, 0.5],\n        tickFormat: d => `${(d * 100).toFixed(0)}%`,\n        grid: true\n      },\n      color: {\n        type: \"categorical\",\n        domain: Object.keys(partyColors),\n        range: Object.values(partyColors)\n      },\n      marks: [\n        // Background grid\n        Plot.gridY({ stroke: \"#f3f4f6\", strokeWidth: 1 }),\n        Plot.gridX({ stroke: \"#f3f4f6\", strokeWidth: 1 }),\n        \n        // Lines for each party\n        Plot.line(filteredData, {\n          x: d => new Date(d.date),\n          y: \"value\",\n          stroke: \"party\",\n          strokeWidth: 2.5,\n          curve: \"catmull-rom\"\n        }),\n        \n        // Points for latest values\n        Plot.dot(latestData, {\n          x: d => new Date(d.date),\n          y: \"value\",\n          fill: \"party\",\n          r: 4,\n          stroke: \"white\",\n          strokeWidth: 2\n        }),\n        \n        // Major parties - label at line end\n        Plot.text(latestData.filter(d => d.value > 0.1), {\n          x: d => new Date(d.date),\n          y: \"value\",\n          text: d => `${d.party} ${(d.value * 100).toFixed(1)}%`,\n          fill: \"party\",\n          dx: 8,\n          fontSize: 11,\n          fontWeight: \"600\",\n          textAnchor: \"start\"\n        }),\n        \n        // Minor parties - sorted bottom to top to match visual order\n        Plot.text(latestData.filter(d => d.value <= 0.1).sort((a, b) => a.value - b.value), Plot.dodgeY({\n          x: d => new Date(d.date),\n          y: \"value\",\n          text: d => `${d.party} ${(d.value * 100).toFixed(1)}%`,\n          fill: \"party\",\n          dx: 8,\n          dy: -3, // Move labels slightly up\n          fontSize: 10,\n          fontWeight: \"500\",\n          textAnchor: \"start\",\n          padding: 4 // Increase spacing between dodged labels\n        }))\n      ]\n    });\n\n    if (containerRef.current) {\n      containerRef.current.replaceChildren(plot);\n    }\n\n    return () => plot.remove();\n  }, [data]);\n\n  // Add resize observer for responsive behavior\n  useEffect(() => {\n    if (!containerRef.current) return;\n    \n    const resizeObserver = new ResizeObserver(() => {\n      // Re-render chart when container size changes\n      if (containerRef.current && data && data.length > 0) {\n        // Small delay to ensure container has final dimensions\n        setTimeout(() => {\n          if (!containerRef.current) return;\n          \n          const containerWidth = containerRef.current.offsetWidth || 900;\n          const containerHeight = 450;\n\n          // Filter for vote share data only\n          const voteShareData = data.filter(d => d.metric === 'vote_share_mean');\n          \n          // Filter to recent time period - show all parties\n          const cutoffDate = new Date();\n          cutoffDate.setFullYear(cutoffDate.getFullYear() - 2);\n          \n          const filteredData = voteShareData.filter(d => new Date(d.date) >= cutoffDate);\n          \n          // Get latest values for all parties\n          const latestData = filteredData\n            .filter(d => {\n              const maxDate = new Date(Math.max(...filteredData.map(dd => new Date(dd.date).getTime())));\n              return new Date(d.date).getTime() === maxDate.getTime();\n            })\n            .sort((a, b) => b.value - a.value);\n          \n          const plot = Plot.plot({\n            width: containerWidth,\n            height: containerHeight,\n            marginLeft: 60,\n            marginRight: 120,\n            marginTop: 20,\n            marginBottom: 50,\n            style: {\n              backgroundColor: \"transparent\",\n              fontSize: \"12px\",\n              fontFamily: \"Inter, system-ui, sans-serif\"\n            },\n            x: {\n              type: \"time\",\n              label: null,\n              tickFormat: \"%b %Y\",\n              grid: true,\n              ticks: 4\n            },\n            y: {\n              label: \"Vote share (%)\",\n              domain: [0, 0.5],\n              tickFormat: d => `${(d * 100).toFixed(0)}%`,\n              grid: true\n            },\n            color: {\n              type: \"categorical\",\n              domain: Object.keys(partyColors),\n              range: Object.values(partyColors)\n            },\n            marks: [\n              Plot.gridY({ stroke: \"#f3f4f6\", strokeWidth: 1 }),\n              Plot.gridX({ stroke: \"#f3f4f6\", strokeWidth: 1 }),\n              \n              Plot.line(filteredData, {\n                x: d => new Date(d.date),\n                y: \"value\",\n                stroke: \"party\",\n                strokeWidth: 2.5,\n                curve: \"catmull-rom\"\n              }),\n              \n              Plot.dot(latestData, {\n                x: d => new Date(d.date),\n                y: \"value\",\n                fill: \"party\",\n                r: 4,\n                stroke: \"white\",\n                strokeWidth: 2\n              }),\n              \n              Plot.text(latestData.filter(d => d.value > 0.1), {\n                x: d => new Date(d.date),\n                y: \"value\",\n                text: d => `${d.party} ${(d.value * 100).toFixed(1)}%`,\n                fill: \"party\",\n                dx: 8,\n                fontSize: 11,\n                fontWeight: \"600\",\n                textAnchor: \"start\"\n              }),\n              \n              Plot.text(latestData.filter(d => d.value <= 0.1).sort((a, b) => a.value - b.value), Plot.dodgeY({\n                x: d => new Date(d.date),\n                y: \"value\",\n                text: d => `${d.party} ${(d.value * 100).toFixed(1)}%`,\n                fill: \"party\",\n                dx: 8,\n                dy: -3,\n                fontSize: 10,\n                fontWeight: \"500\",\n                textAnchor: \"start\",\n                padding: 4\n              }))\n            ]\n          });\n\n          containerRef.current.replaceChildren(plot);\n        }, 100);\n      }\n    });\n    \n    resizeObserver.observe(containerRef.current);\n    \n    return () => resizeObserver.disconnect();\n  }, [data]);\n\n  return (\n    <div className=\"w-full\">\n      <div ref={containerRef} className=\"overflow-x-auto\" />\n    </div>\n  );\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 396, "column": 0}, "map": {"version":3,"sources":["file:///Users/bernardo/estimador-web/src/components/charts/SeatChart.tsx"],"sourcesContent":["\"use client\";\n\nimport * as Plot from \"@observablehq/plot\";\nimport { useEffect, useRef } from \"react\";\nimport { partyColors, partyNames } from \"@/lib/config/colors\";\n\ninterface SeatData {\n  party: string;\n  seats: number;\n}\n\ninterface SeatChartProps {\n  data: SeatData[];\n}\n\nexport function SeatChart({ data }: SeatChartProps) {\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (!data || data.length === 0 || !containerRef.current) return;\n\n    // Get actual container width for responsive sizing\n    const containerWidth = containerRef.current.offsetWidth || 1000;\n    const containerHeight = 400;\n\n    // Calculate seat statistics for each party\n    const seatStats = data.reduce((acc, d) => {\n      if (!acc[d.party]) {\n        acc[d.party] = [];\n      }\n      acc[d.party].push(d.seats);\n      return acc;\n    }, {} as Record<string, number[]>);\n\n    const chartData = Object.entries(seatStats).map(([party, seats]) => {\n      const sorted = seats.sort((a, b) => a - b);\n      return {\n        party,\n        mean: Math.round(sorted.reduce((sum, s) => sum + s, 0) / sorted.length),\n        p10: sorted[Math.floor(sorted.length * 0.1)],\n        p25: sorted[Math.floor(sorted.length * 0.25)],\n        p75: sorted[Math.floor(sorted.length * 0.75)],\n        p90: sorted[Math.floor(sorted.length * 0.9)],\n        min: Math.min(...sorted),\n        max: Math.max(...sorted)\n      };\n    }).sort((a, b) => b.mean - a.mean);\n\n    const plot = Plot.plot({\n      width: containerWidth,\n      height: containerHeight,\n      marginLeft: 80,\n      marginRight: 20,\n      marginTop: 20,\n      marginBottom: 40,\n      style: {\n        backgroundColor: \"transparent\",\n        fontSize: \"12px\",\n        fontFamily: \"Inter, system-ui, sans-serif\"\n      },\n      x: {\n        label: \"Projected seats\",\n        grid: true,\n        domain: [0, Math.max(...chartData.map(d => d.max)) + 10]\n      },\n      y: {\n        label: null,\n        domain: chartData.map(d => d.party),\n        tickFormat: d => partyNames[d as keyof typeof partyNames] || d\n      },\n      color: {\n        type: \"categorical\",\n        domain: Object.keys(partyColors),\n        range: Object.values(partyColors)\n      },\n      marks: [\n        // Background grid\n        Plot.gridX({ stroke: \"#f3f4f6\", strokeWidth: 1 }),\n        \n        // Uncertainty bands (80% confidence)\n        Plot.barX(chartData, {\n          x1: \"p10\",\n          x2: \"p90\",\n          y: \"party\",\n          fill: \"party\",\n          fillOpacity: 0.2,\n          height: 20\n        }),\n        \n        // Interquartile range (50% confidence)\n        Plot.barX(chartData, {\n          x1: \"p25\",\n          x2: \"p75\",\n          y: \"party\",\n          fill: \"party\",\n          fillOpacity: 0.4,\n          height: 20\n        }),\n        \n        // Mean projection\n        Plot.dot(chartData, {\n          x: \"mean\",\n          y: \"party\",\n          fill: \"party\",\n          r: 4,\n          stroke: \"white\",\n          strokeWidth: 2\n        }),\n        \n        // Mean labels\n        Plot.text(chartData, {\n          x: \"mean\",\n          y: \"party\",\n          text: \"mean\",\n          dx: 15,\n          fontSize: 11,\n          fontWeight: \"600\",\n          fill: \"#374151\"\n        })\n      ]\n    });\n\n    if (containerRef.current) {\n      containerRef.current.replaceChildren(plot);\n    }\n\n    return () => plot.remove();\n  }, [data]);\n\n  // Add resize observer for responsive behavior\n  useEffect(() => {\n    if (!containerRef.current) return;\n    \n    const resizeObserver = new ResizeObserver(() => {\n      // Re-render chart when container size changes\n      if (containerRef.current && data && data.length > 0) {\n        // Small delay to ensure container has final dimensions\n        setTimeout(() => {\n          if (!containerRef.current) return;\n          \n          const containerWidth = containerRef.current.offsetWidth || 1000;\n          const containerHeight = 400;\n\n          // Calculate seat statistics for each party\n          const seatStats = data.reduce((acc, d) => {\n            if (!acc[d.party]) {\n              acc[d.party] = [];\n            }\n            acc[d.party].push(d.seats);\n            return acc;\n          }, {} as Record<string, number[]>);\n\n          const chartData = Object.entries(seatStats).map(([party, seats]) => {\n            const sorted = seats.sort((a, b) => a - b);\n            return {\n              party,\n              mean: Math.round(sorted.reduce((sum, s) => sum + s, 0) / sorted.length),\n              p10: sorted[Math.floor(sorted.length * 0.1)],\n              p25: sorted[Math.floor(sorted.length * 0.25)],\n              p75: sorted[Math.floor(sorted.length * 0.75)],\n              p90: sorted[Math.floor(sorted.length * 0.9)],\n              min: Math.min(...sorted),\n              max: Math.max(...sorted)\n            };\n          }).sort((a, b) => b.mean - a.mean);\n\n          const plot = Plot.plot({\n            width: containerWidth,\n            height: containerHeight,\n            marginLeft: 80,\n            marginRight: 20,\n            marginTop: 20,\n            marginBottom: 40,\n            style: {\n              backgroundColor: \"transparent\",\n              fontSize: \"12px\",\n              fontFamily: \"Inter, system-ui, sans-serif\"\n            },\n            x: {\n              label: \"Projected seats\",\n              grid: true,\n              domain: [0, Math.max(...chartData.map(d => d.max)) + 10]\n            },\n            y: {\n              label: null,\n              domain: chartData.map(d => d.party),\n              tickFormat: d => partyNames[d as keyof typeof partyNames] || d\n            },\n            color: {\n              type: \"categorical\",\n              domain: Object.keys(partyColors),\n              range: Object.values(partyColors)\n            },\n            marks: [\n              // Background grid\n              Plot.gridX({ stroke: \"#f3f4f6\", strokeWidth: 1 }),\n              \n              // Uncertainty bands (80% confidence)\n              Plot.barX(chartData, {\n                x1: \"p10\",\n                x2: \"p90\",\n                y: \"party\",\n                fill: \"party\",\n                fillOpacity: 0.2,\n                height: 20\n              }),\n              \n              // Interquartile range (50% confidence)\n              Plot.barX(chartData, {\n                x1: \"p25\",\n                x2: \"p75\",\n                y: \"party\",\n                fill: \"party\",\n                fillOpacity: 0.4,\n                height: 20\n              }),\n              \n              // Mean projection\n              Plot.dot(chartData, {\n                x: \"mean\",\n                y: \"party\",\n                fill: \"party\",\n                r: 4,\n                stroke: \"white\",\n                strokeWidth: 2\n              }),\n              \n              // Mean labels\n              Plot.text(chartData, {\n                x: \"mean\",\n                y: \"party\",\n                text: \"mean\",\n                dx: 15,\n                fontSize: 11,\n                fontWeight: \"600\",\n                fill: \"#374151\"\n              })\n            ]\n          });\n\n          containerRef.current.replaceChildren(plot);\n        }, 100);\n      }\n    });\n    \n    resizeObserver.observe(containerRef.current);\n    \n    return () => resizeObserver.disconnect();\n  }, [data]);\n\n  return (\n    <div className=\"w-full\">\n      <div ref={containerRef} className=\"overflow-x-auto\" />\n    </div>\n  );\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 716, "column": 0}, "map": {"version":3,"sources":["file:///Users/bernardo/estimador-web/src/components/charts/DistrictSummary.tsx"],"sourcesContent":["\"use client\";\n\nimport { partyColors, partyNames } from \"@/lib/config/colors\";\n\ninterface DistrictForecast {\n  district_name: string;\n  winning_party: string;\n  probs: Record<string, number>;\n}\n\ninterface ContestedData {\n  districts: Record<string, {\n    ENSC: number;\n    delta2024?: Record<string, number>;\n    parties?: Record<string, Record<string, number>>;\n  }>;\n}\n\ninterface DistrictSummaryProps {\n  districtData: DistrictForecast[];\n  contestedData: ContestedData;\n}\n\nexport function DistrictSummary({ districtData, contestedData }: DistrictSummaryProps) {\n  if (!districtData || districtData.length === 0) {\n    return (\n      <div className=\"text-center py-8 text-gray-500\">\n        <p>District analysis loading...</p>\n      </div>\n    );\n  }\n\n  // Sort districts by competitiveness (ENSC score)\n  const sortedDistricts = districtData\n    .map(district => {\n      const contestedInfo = contestedData?.districts?.[district.district_name];\n      const competitiveness = contestedInfo?.ENSC || 0;\n      \n      // Get top 2 parties by probability\n      const parties = Object.entries(district.probs)\n        .sort(([,a], [,b]) => b - a)\n        .slice(0, 2);\n      \n      return {\n        ...district,\n        competitiveness,\n        topParties: parties,\n        isContested: competitiveness > 0.8\n      };\n    })\n    .sort((a, b) => b.competitiveness - a.competitiveness);\n\n  const contestedDistricts = sortedDistricts.filter(d => d.isContested);\n  const safeDistricts = sortedDistricts.filter(d => !d.isContested);\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Contested Districts */}\n      {contestedDistricts.length > 0 && (\n        <div>\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n            Seats in Play ({contestedDistricts.length} districts)\n          </h3>\n          <p className=\"text-sm text-gray-600 mb-4\">\n            Districts where seat allocation is uncertain - small changes in vote share could flip seats between parties.\n          </p>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {contestedDistricts.slice(0, 9).map(district => {\n              const contestedInfo = contestedData?.districts?.[district.district_name];\n              const seatChanges = contestedInfo?.parties || {};\n              \n              // Find parties with meaningful seat change probabilities\n              const partiesWithChanges = Object.entries(seatChanges)\n                .map(([party, probs]) => {\n                  const gainProb = (probs[\"1\"] || 0) + (probs[\"2\"] || 0);\n                  const loseProb = (probs[\"-1\"] || 0) + (probs[\"-2\"] || 0);\n                  return {\n                    party,\n                    gainProb,\n                    loseProb,\n                    hasChange: gainProb > 0.05 || loseProb > 0.05\n                  };\n                })\n                .filter(p => p.hasChange)\n                .sort((a, b) => (b.gainProb + b.loseProb) - (a.gainProb + a.loseProb))\n                .slice(0, 3);\n\n              return (\n                <div key={district.district_name} className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4\">\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <h4 className=\"font-medium text-gray-900\">{district.district_name}</h4>\n                    <span className=\"text-xs bg-yellow-200 text-yellow-800 px-2 py-1 rounded\">\n                      ENSC: {district.competitiveness.toFixed(2)}\n                    </span>\n                  </div>\n                  <div className=\"space-y-2\">\n                    {partiesWithChanges.length > 0 ? partiesWithChanges.map(({ party, gainProb, loseProb }) => (\n                      <div key={party} className=\"space-y-1\">\n                        <div className=\"flex items-center gap-2\">\n                          <div \n                            className=\"w-3 h-3 rounded\"\n                            style={{ backgroundColor: partyColors[party as keyof typeof partyColors] }}\n                          />\n                          <span className=\"text-sm font-medium\">\n                            {partyNames[party as keyof typeof partyNames] || party}\n                          </span>\n                        </div>\n                        <div className=\"ml-5 text-xs text-gray-600\">\n                          {gainProb > 0.05 && (\n                            <span className=\"text-green-700\">+1 seat: {(gainProb * 100).toFixed(0)}%</span>\n                          )}\n                          {gainProb > 0.05 && loseProb > 0.05 && <span className=\"mx-1\">•</span>}\n                          {loseProb > 0.05 && (\n                            <span className=\"text-red-700\">-1 seat: {(loseProb * 100).toFixed(0)}%</span>\n                          )}\n                        </div>\n                      </div>\n                    )) : (\n                      <div className=\"text-xs text-gray-500\">Close race for seat allocation</div>\n                    )}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      )}\n\n      {/* Safe Districts Summary */}\n      <div>\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n          Likely Winners by District\n        </h3>\n        <div className=\"bg-white border border-gray-200 rounded-lg p-4\">\n          <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n            {Object.values(partyColors).map((color, index) => {\n              const party = Object.keys(partyColors)[index];\n              const wins = safeDistricts.filter(d => d.winning_party === party).length;\n              \n              if (wins === 0) return null;\n              \n              return (\n                <div key={party} className=\"text-center\">\n                  <div \n                    className=\"w-12 h-12 mx-auto mb-2 rounded-lg flex items-center justify-center text-white font-bold shadow-md\"\n                    style={{ backgroundColor: color }}\n                  >\n                    {wins}\n                  </div>\n                  <div className=\"text-sm font-medium text-gray-900\">\n                    {partyNames[party as keyof typeof partyNames] || party}\n                  </div>\n                  <div className=\"text-xs text-gray-500\">districts</div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n\n      {/* Summary Stats */}\n      <div className=\"bg-gray-50 border border-gray-200 rounded-lg p-4\">\n        <div className=\"grid grid-cols-3 gap-4 text-center\">\n          <div>\n            <div className=\"text-2xl font-bold text-gray-900\">{districtData.length}</div>\n            <div className=\"text-sm text-gray-600\">Total districts</div>\n          </div>\n          <div>\n            <div className=\"text-2xl font-bold text-yellow-600\">{contestedDistricts.length}</div>\n            <div className=\"text-sm text-gray-600\">Seats in play</div>\n          </div>\n          <div>\n            <div className=\"text-2xl font-bold text-green-600\">{safeDistricts.length}</div>\n            <div className=\"text-sm text-gray-600\">Stable allocation</div>\n          </div>\n        </div>\n        \n        <div className=\"mt-4 pt-4 border-t border-gray-200\">\n          <p className=\"text-xs text-gray-500\">\n            <strong>ENSC (Effective Number of Seat Changes)</strong> measures seat allocation uncertainty. \n            Districts with ENSC &gt; 0.8 are classified as having \"seats in play\" where small vote share changes \n            could flip seats between parties under the D'Hondt proportional system.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1150, "column": 0}, "map": {"version":3,"sources":["file:///Users/bernardo/estimador-web/src/components/charts/HouseEffects.tsx"],"sourcesContent":["\"use client\";\n\nimport { partyColors } from \"@/lib/config/colors\";\n\ninterface HouseEffect {\n  pollster: string;\n  party: string;\n  effect: number;\n  n_polls: number;\n}\n\ninterface HouseEffectsProps {\n  data: HouseEffect[];\n}\n\n// Color interpolation for the heatmap\nfunction getHeatmapColor(value: number): string {\n  // Normalize value to [-1, 1] for color mapping\n  const normalized = Math.max(-1, Math.min(1, value / 0.4));\n  \n  if (Math.abs(normalized) < 0.05) return \"#f8f9fa\";\n  \n  if (normalized > 0) {\n    // Softer red tones for positive values\n    const intensity = Math.abs(normalized);\n    const r = Math.round(254 + (220 - 254) * intensity);\n    const g = Math.round(226 + (38 - 226) * intensity);\n    const b = Math.round(226 + (38 - 226) * intensity);\n    return `rgb(${r}, ${g}, ${b})`;\n  } else {\n    // Softer blue tones for negative values\n    const intensity = Math.abs(normalized);\n    const r = Math.round(219 + (69 - 219) * intensity);\n    const g = Math.round(234 + (123 - 234) * intensity);\n    const b = Math.round(254 + (157 - 254) * intensity);\n    return `rgb(${r}, ${g}, ${b})`;\n  }\n}\n\nexport function HouseEffects({ data }: HouseEffectsProps) {\n  if (!data || data.length === 0) {\n    return (\n      <div className=\"text-center py-8 text-gray-500\">\n        <p>House effects analysis loading...</p>\n      </div>\n    );\n  }\n\n  // Transform data format if needed\n  const transformedData = data.map(d => ({\n    pollster: d.pollster,\n    party: d.party,\n    effect: (d as any).house_effect || d.effect || 0,\n    n_polls: d.n_polls || 5\n  }));\n\n  // Get unique pollsters and parties\n  const pollsters = Array.from(new Set(transformedData.map(d => d.pollster))).sort();\n  const parties = Object.keys(partyColors).filter(party => \n    transformedData.some(d => d.party === party)\n  );\n\n  // Create a matrix for easy lookup\n  const matrix: Record<string, Record<string, number>> = {};\n  transformedData.forEach(d => {\n    if (!matrix[d.pollster]) matrix[d.pollster] = {};\n    matrix[d.pollster][d.party] = d.effect;\n  });\n\n  return (\n    <div className=\"w-full\">\n      <div className=\"bg-white border border-gray-200 rounded-lg overflow-hidden\">\n        <div className=\"overflow-x-auto\">\n          <table className=\"min-w-full\">\n            <thead className=\"bg-gray-50\">\n              <tr>\n                <th className=\"px-4 py-3 text-left text-sm font-semibold text-gray-700 w-40\">\n                  Pollster\n                </th>\n                {parties.map(party => (\n                  <th\n                    key={party}\n                    className=\"px-3 py-3 text-center text-sm font-semibold w-20\"\n                    style={{ color: partyColors[party as keyof typeof partyColors] }}\n                  >\n                    {party}\n                  </th>\n                ))}\n              </tr>\n            </thead>\n            <tbody className=\"divide-y divide-gray-200\">\n              {pollsters.map(pollster => (\n                <tr key={pollster}>\n                  <td className=\"px-4 py-3 text-sm font-medium text-gray-900 bg-gray-50\">\n                    {pollster}\n                  </td>\n                  {parties.map(party => {\n                    const effect = matrix[pollster]?.[party] || 0;\n                    const showValue = Math.abs(effect) > 0.02;\n                    \n                    return (\n                      <td\n                        key={`${pollster}-${party}`}\n                        className=\"px-3 py-3 text-center text-xs font-semibold relative group cursor-help\"\n                        style={{ \n                          backgroundColor: getHeatmapColor(effect),\n                          color: Math.abs(effect) > 0.25 ? \"white\" : \"#374151\"\n                        }}\n                        title={`${pollster} → ${party}: ${effect.toFixed(3)} logit`}\n                      >\n                        {showValue && (\n                          <span>\n                            {effect > 0 ? '+' : ''}{effect.toFixed(2)}\n                          </span>\n                        )}\n                        \n                        {/* Tooltip */}\n                        <div className=\"absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-2 py-1 bg-gray-900 text-white text-xs rounded opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none whitespace-nowrap z-10\">\n                          {pollster} → {party}: {effect.toFixed(3)} logit\n                        </div>\n                      </td>\n                    );\n                  })}\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n      \n      <div className=\"mt-4 text-sm text-gray-600 space-y-2\">\n        <p>\n          <strong>House effects</strong> show how each pollster systematically differs from the polling average in logit space. \n          Red cells indicate the pollster tends to show higher support for that party, blue cells show lower support.\n        </p>\n        <p className=\"text-xs\">\n          Values are logit deviations. Larger absolute values indicate stronger systematic bias. Hover over cells for exact values.\n        </p>\n      </div>\n    </div>\n  );\n}"],"names":[],"mappings":";;;;;AAEA;AAFA;;;AAeA,sCAAsC;AACtC,SAAS,gBAAgB,KAAa;IACpC,+CAA+C;IAC/C,MAAM,aAAa,KAAK,GAAG,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,GAAG,QAAQ;IAEpD,IAAI,KAAK,GAAG,CAAC,cAAc,MAAM,OAAO;IAExC,IAAI,aAAa,GAAG;QAClB,uCAAuC;QACvC,MAAM,YAAY,KAAK,GAAG,CAAC;QAC3B,MAAM,IAAI,KAAK,KAAK,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI;QACzC,MAAM,IAAI,KAAK,KAAK,CAAC,MAAM,CAAC,KAAK,GAAG,IAAI;QACxC,MAAM,IAAI,KAAK,KAAK,CAAC,MAAM,CAAC,KAAK,GAAG,IAAI;QACxC,OAAO,AAAC,OAAY,OAAN,GAAE,MAAU,OAAN,GAAE,MAAM,OAAF,GAAE;IAC9B,OAAO;QACL,wCAAwC;QACxC,MAAM,YAAY,KAAK,GAAG,CAAC;QAC3B,MAAM,IAAI,KAAK,KAAK,CAAC,MAAM,CAAC,KAAK,GAAG,IAAI;QACxC,MAAM,IAAI,KAAK,KAAK,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI;QACzC,MAAM,IAAI,KAAK,KAAK,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI;QACzC,OAAO,AAAC,OAAY,OAAN,GAAE,MAAU,OAAN,GAAE,MAAM,OAAF,GAAE;IAC9B;AACF;AAEO,SAAS,aAAa,KAA2B;QAA3B,EAAE,IAAI,EAAqB,GAA3B;IAC3B,IAAI,CAAC,QAAQ,KAAK,MAAM,KAAK,GAAG;QAC9B,qBACE,6LAAC;YAAI,WAAU;sBACb,cAAA,6LAAC;0BAAE;;;;;;;;;;;IAGT;IAEA,kCAAkC;IAClC,MAAM,kBAAkB,KAAK,GAAG,CAAC,CAAA,IAAK,CAAC;YACrC,UAAU,EAAE,QAAQ;YACpB,OAAO,EAAE,KAAK;YACd,QAAQ,AAAC,EAAU,YAAY,IAAI,EAAE,MAAM,IAAI;YAC/C,SAAS,EAAE,OAAO,IAAI;QACxB,CAAC;IAED,mCAAmC;IACnC,MAAM,YAAY,MAAM,IAAI,CAAC,IAAI,IAAI,gBAAgB,GAAG,CAAC,CAAA,IAAK,EAAE,QAAQ,IAAI,IAAI;IAChF,MAAM,UAAU,OAAO,IAAI,CAAC,gJAAW,EAAE,MAAM,CAAC,CAAA,QAC9C,gBAAgB,IAAI,CAAC,CAAA,IAAK,EAAE,KAAK,KAAK;IAGxC,kCAAkC;IAClC,MAAM,SAAiD,CAAC;IACxD,gBAAgB,OAAO,CAAC,CAAA;QACtB,IAAI,CAAC,MAAM,CAAC,EAAE,QAAQ,CAAC,EAAE,MAAM,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC;QAC/C,MAAM,CAAC,EAAE,QAAQ,CAAC,CAAC,EAAE,KAAK,CAAC,GAAG,EAAE,MAAM;IACxC;IAEA,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC;gBAAI,WAAU;0BACb,cAAA,6LAAC;oBAAI,WAAU;8BACb,cAAA,6LAAC;wBAAM,WAAU;;0CACf,6LAAC;gCAAM,WAAU;0CACf,cAAA,6LAAC;;sDACC,6LAAC;4CAAG,WAAU;sDAA+D;;;;;;wCAG5E,QAAQ,GAAG,CAAC,CAAA,sBACX,6LAAC;gDAEC,WAAU;gDACV,OAAO;oDAAE,OAAO,gJAAW,CAAC,MAAkC;gDAAC;0DAE9D;+CAJI;;;;;;;;;;;;;;;;0CASb,6LAAC;gCAAM,WAAU;0CACd,UAAU,GAAG,CAAC,CAAA,yBACb,6LAAC;;0DACC,6LAAC;gDAAG,WAAU;0DACX;;;;;;4CAEF,QAAQ,GAAG,CAAC,CAAA;oDACI;gDAAf,MAAM,SAAS,EAAA,mBAAA,MAAM,CAAC,SAAS,cAAhB,uCAAA,gBAAkB,CAAC,MAAM,KAAI;gDAC5C,MAAM,YAAY,KAAK,GAAG,CAAC,UAAU;gDAErC,qBACE,6LAAC;oDAEC,WAAU;oDACV,OAAO;wDACL,iBAAiB,gBAAgB;wDACjC,OAAO,KAAK,GAAG,CAAC,UAAU,OAAO,UAAU;oDAC7C;oDACA,OAAO,AAAC,GAAgB,OAAd,UAAS,OAAe,OAAV,OAAM,MAAsB,OAAlB,OAAO,OAAO,CAAC,IAAG;;wDAEnD,2BACC,6LAAC;;gEACE,SAAS,IAAI,MAAM;gEAAI,OAAO,OAAO,CAAC;;;;;;;sEAK3C,6LAAC;4DAAI,WAAU;;gEACZ;gEAAS;gEAAI;gEAAM;gEAAG,OAAO,OAAO,CAAC;gEAAG;;;;;;;;mDAhBtC,AAAC,GAAc,OAAZ,UAAS,KAAS,OAAN;;;;;4CAoB1B;;uCA9BO;;;;;;;;;;;;;;;;;;;;;;;;;;0BAsCnB,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;;0CACC,6LAAC;0CAAO;;;;;;4BAAsB;;;;;;;kCAGhC,6LAAC;wBAAE,WAAU;kCAAU;;;;;;;;;;;;;;;;;;AAM/B;KAtGgB","debugId":null}},
    {"offset": {"line": 1391, "column": 0}, "map": {"version":3,"sources":["file:///Users/bernardo/estimador-web/src/lib/config/blocs.ts"],"sourcesContent":["export const leftBlocParties = [\"PS\", \"BE\", \"CDU\", \"L\"];\nexport const rightBlocParties = [\"AD\", \"IL\"];\nexport const majorityThreshold = 116;\n\nexport const rightPlusParties = [\"AD\", \"IL\"];\nexport const leftPlusScenarioParties = [\"PS\", \"L\", \"PAN\", \"BE\", \"CDU\"];"],"names":[],"mappings":";;;;;;;;;;;;AAAO,MAAM,kBAAkB;IAAC;IAAM;IAAM;IAAO;CAAI;AAChD,MAAM,mBAAmB;IAAC;IAAM;CAAK;AACrC,MAAM,oBAAoB;AAE1B,MAAM,mBAAmB;IAAC;IAAM;CAAK;AACrC,MAAM,0BAA0B;IAAC;IAAM;IAAK;IAAO;IAAM;CAAM","debugId":null}},
    {"offset": {"line": 1432, "column": 0}, "map": {"version":3,"sources":["file:///Users/bernardo/estimador-web/src/components/charts/CoalitionDotPlot.tsx"],"sourcesContent":["\"use client\";\n\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport { useEffect, useRef } from \"react\";\nimport { leftBlocParties, rightBlocParties, majorityThreshold } from \"@/lib/config/blocs\";\n\ninterface SeatData {\n  [party: string]: number;\n}\n\ninterface CoalitionDotPlotProps {\n  data: SeatData[];\n}\n\nexport function CoalitionDotPlot({ data }: CoalitionDotPlotProps) {\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (!data || data.length === 0 || !containerRef.current) {\n      console.log(\"CoalitionDotPlot: No data available\");\n      return;\n    }\n    \n    // Get actual container width for responsive sizing\n    const containerWidth = containerRef.current.offsetWidth || 1000;\n    const containerHeight = 350;\n    \n    console.log(`CoalitionDotPlot: Processing ${data.length} data points, container width: ${containerWidth}`);\n    console.log('First 3 data points:', data.slice(0, 3));\n\n    // Calculate coalition seats for each simulation\n    const blocDrawData = data.flatMap((simulation, index) => {\n      const leftSeats = leftBlocParties.reduce((sum, party) => sum + (simulation[party] || 0), 0);\n      const rightSeats = rightBlocParties.reduce((sum, party) => sum + (simulation[party] || 0), 0);\n      \n      return [\n        { draw: index, bloc: \"Left coalition\", totalSeats: leftSeats },\n        { draw: index, bloc: \"Right coalition\", totalSeats: rightSeats }\n      ];\n    });\n\n    // Calculate medians\n    const blocMedians = Array.from(\n      d3.rollup(blocDrawData, v => d3.median(v, d => d.totalSeats), d => d.bloc),\n      ([bloc, medianSeats]) => ({ bloc, medianSeats })\n    );\n\n    // Sample data for performance - increase for better density\n    const sampleSize = Math.min(1600, blocDrawData.length);\n    const sampledData = d3.shuffle(blocDrawData.slice()).slice(0, sampleSize);\n    \n    console.log(`CoalitionDotPlot: ${blocDrawData.length} coalition data points, sampling ${sampledData.length}`);\n    console.log('Sample of blocDrawData:', blocDrawData.slice(0, 5));\n    console.log('Sample of sampledData:', sampledData.slice(0, 5));\n    console.log('Bloc medians:', blocMedians);\n\n    const plot = Plot.plot({\n      width: containerWidth,\n      height: containerHeight,\n      marginLeft: 140,\n      marginRight: 60,\n      marginTop: 30,\n      marginBottom: 50,\n      style: {\n        backgroundColor: \"transparent\",\n        fontSize: \"12px\",\n        fontFamily: \"Inter, system-ui, sans-serif\"\n      },\n      x: {\n        label: \"Projected seats\",\n        domain: [40, 140],\n        grid: true,\n        ticks: [50, 75, 100, majorityThreshold, 125]\n      },\n      fy: {\n        domain: [\"Left coalition\", \"Right coalition\"],\n        label: null,\n        axis: \"left\",\n        padding: 0.1\n      },\n      color: {\n        domain: [\"Left coalition\", \"Right coalition\"],\n        range: [\"#10b981\", \"#f59e0b\"]\n      },\n      marks: [\n        // Majority line (spans across facets)\n        Plot.ruleX([majorityThreshold], { \n          stroke: \"#dc2626\", \n          strokeWidth: 2, \n          strokeDasharray: \"4,2\",\n          facet: \"exclude\"\n        }),\n        \n        // Dodged dots with slight horizontal jitter\n        Plot.dotX(sampledData, Plot.dodgeY({\n          x: d => d.totalSeats + (Math.random() - 0.5) * 1.5, // Add small horizontal jitter\n          fy: \"bloc\",\n          fill: \"bloc\",\n          fillOpacity: 0.7,\n          r: 1.2,\n          anchor: \"middle\"\n        })),\n        \n        // Median lines\n        Plot.ruleX(blocMedians, {\n          x: \"medianSeats\",\n          fy: \"bloc\",\n          stroke: \"black\",\n          strokeWidth: 2,\n          strokeDasharray: \"2,2\"\n        }),\n        \n        // Median labels\n        Plot.text(blocMedians, {\n          x: \"medianSeats\",\n          fy: \"bloc\",\n          text: d => Math.round(d.medianSeats).toString(),\n          dy: -8,\n          dx: 5,\n          fontSize: 11,\n          fontWeight: \"bold\",\n          fill: \"black\"\n        }),\n        \n        // Majority label\n        Plot.text([{ x: majorityThreshold, fy: \"Left coalition\" }], {\n          x: \"x\",\n          fy: \"fy\",\n          text: `Majority (${majorityThreshold})`,\n          dx: 5,\n          dy: -10,\n          fontSize: 11,\n          fill: \"#dc2626\",\n          fontWeight: \"600\"\n        })\n      ]\n    });\n\n    if (containerRef.current) {\n      containerRef.current.replaceChildren(plot);\n    }\n\n    return () => plot.remove();\n  }, [data]);\n\n  // Add resize observer for responsive behavior\n  useEffect(() => {\n    if (!containerRef.current) return;\n    \n    const resizeObserver = new ResizeObserver(() => {\n      // Re-render chart when container size changes\n      if (containerRef.current && data && data.length > 0) {\n        // Small delay to ensure container has final dimensions\n        setTimeout(() => {\n          if (!containerRef.current) return;\n          \n          const containerWidth = containerRef.current.offsetWidth || 1000;\n          const containerHeight = 350;\n\n          // Calculate coalition seats for each simulation\n          const blocDrawData = data.flatMap((simulation, index) => {\n            const leftSeats = leftBlocParties.reduce((sum, party) => sum + (simulation[party] || 0), 0);\n            const rightSeats = rightBlocParties.reduce((sum, party) => sum + (simulation[party] || 0), 0);\n            \n            return [\n              { draw: index, bloc: \"Left coalition\", totalSeats: leftSeats },\n              { draw: index, bloc: \"Right coalition\", totalSeats: rightSeats }\n            ];\n          });\n\n          // Calculate medians\n          const blocMedians = Array.from(\n            d3.rollup(blocDrawData, v => d3.median(v, d => d.totalSeats), d => d.bloc),\n            ([bloc, medianSeats]) => ({ bloc, medianSeats })\n          );\n\n          // Sample data for performance\n          const sampleSize = Math.min(1600, blocDrawData.length);\n          const sampledData = d3.shuffle(blocDrawData.slice()).slice(0, sampleSize);\n\n          const plot = Plot.plot({\n            width: containerWidth,\n            height: containerHeight,\n            marginLeft: 140,\n            marginRight: 60,\n            marginTop: 30,\n            marginBottom: 50,\n            style: {\n              backgroundColor: \"transparent\",\n              fontSize: \"12px\",\n              fontFamily: \"Inter, system-ui, sans-serif\"\n            },\n            x: {\n              label: \"Projected seats\",\n              domain: [40, 140],\n              grid: true,\n              ticks: [50, 75, 100, majorityThreshold, 125]\n            },\n            fy: {\n              domain: [\"Left coalition\", \"Right coalition\"],\n              label: null,\n              axis: \"left\",\n              padding: 0.1\n            },\n            color: {\n              domain: [\"Left coalition\", \"Right coalition\"],\n              range: [\"#10b981\", \"#f59e0b\"]\n            },\n            marks: [\n              // Majority line (spans across facets)\n              Plot.ruleX([majorityThreshold], { \n                stroke: \"#dc2626\", \n                strokeWidth: 2, \n                strokeDasharray: \"4,2\",\n                facet: \"exclude\"\n              }),\n              \n              // Dodged dots with slight horizontal jitter\n              Plot.dotX(sampledData, Plot.dodgeY({\n                x: d => d.totalSeats + (Math.random() - 0.5) * 1.5, // Add small horizontal jitter\n                fy: \"bloc\",\n                fill: \"bloc\",\n                fillOpacity: 0.7,\n                r: 1.2,\n                anchor: \"middle\"\n              })),\n              \n              // Median lines\n              Plot.ruleX(blocMedians, {\n                x: \"medianSeats\",\n                fy: \"bloc\",\n                stroke: \"black\",\n                strokeWidth: 2,\n                strokeDasharray: \"2,2\"\n              }),\n              \n              // Median labels\n              Plot.text(blocMedians, {\n                x: \"medianSeats\",\n                fy: \"bloc\",\n                text: d => Math.round(d.medianSeats).toString(),\n                dy: -8,\n                dx: 5,\n                fontSize: 11,\n                fontWeight: \"bold\",\n                fill: \"black\"\n              }),\n              \n              // Majority label\n              Plot.text([{ x: majorityThreshold, fy: \"Left coalition\" }], {\n                x: \"x\",\n                fy: \"fy\",\n                text: `Majority (${majorityThreshold})`,\n                dx: 5,\n                dy: -10,\n                fontSize: 11,\n                fill: \"#dc2626\",\n                fontWeight: \"600\"\n              })\n            ]\n          });\n\n          containerRef.current.replaceChildren(plot);\n        }, 100);\n      }\n    });\n    \n    resizeObserver.observe(containerRef.current);\n    \n    return () => resizeObserver.disconnect();\n  }, [data]);\n\n  if (!data || data.length === 0) {\n    return (\n      <div className=\"w-full h-64 flex items-center justify-center text-gray-500\">\n        <p>Loading coalition data...</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"w-full\">\n      <div ref={containerRef} className=\"overflow-x-auto\" />\n      <div className=\"text-xs text-gray-500 mt-2\">\n        Showing {data.length} simulation outcomes\n      </div>\n    </div>\n  );\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1866, "column": 0}, "map": {"version":3,"sources":["file:///Users/bernardo/estimador-web/src/components/Header.tsx"],"sourcesContent":["'use client';\n\nimport Link from \"next/link\";\nimport { usePathname } from \"next/navigation\";\nimport { Calendar } from \"lucide-react\";\n\ninterface HeaderProps {\n  lastUpdate?: string;\n}\n\nexport function Header({ lastUpdate }: HeaderProps) {\n  const pathname = usePathname();\n\n  const getPageTitle = () => {\n    switch (pathname) {\n      case '/forecast':\n        return 'Full Election Forecast';\n      case '/about':\n        return 'About';\n      case '/articles':\n        return 'Analysis & Articles';\n      case '/methodology':\n        return 'Methodology';\n      default:\n        return '';\n    }\n  };\n\n  const navigationItems = [\n    { href: '/', label: 'Home' },\n    { href: '/forecast', label: 'Forecast' },\n    { href: '/articles', label: 'Analysis' },\n    { href: '/about', label: 'About' },\n  ];\n\n  return (\n    <header className=\"border-b border-green-medium bg-green-pale sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-4\">\n            <div>\n              <Link href=\"/\" className=\"text-2xl font-bold text-green-dark hover:text-green-medium\">\n                estimador.pt\n              </Link>\n              <p className=\"text-sm text-green-dark/70\">Portuguese Election Forecast</p>\n            </div>\n            {pathname !== '/' && (\n              <div className=\"border-l border-green-medium pl-4\">\n                <h1 className=\"text-xl font-bold text-green-dark\">{getPageTitle()}</h1>\n                {pathname === '/forecast' && (\n                  <p className=\"text-sm text-green-dark/70\">Portugal Parliamentary Elections</p>\n                )}\n              </div>\n            )}\n          </div>\n          \n          <div className=\"flex items-center gap-6\">\n            <nav className=\"hidden md:flex gap-6\">\n              {navigationItems.map((item) => (\n                <Link\n                  key={item.href}\n                  href={item.href}\n                  className={`font-medium transition-colors ${\n                    pathname === item.href\n                      ? 'text-green-dark'\n                      : 'text-green-dark/70 hover:text-green-dark'\n                  }`}\n                >\n                  {item.label}\n                </Link>\n              ))}\n            </nav>\n            \n            {lastUpdate && (\n              <div className=\"flex items-center gap-1 text-xs text-green-dark/70\">\n                <Calendar className=\"w-3 h-3\" />\n                <span>Updated {lastUpdate}</span>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;;;AAJA;;;;AAUO,SAAS,OAAO,KAA2B;QAA3B,EAAE,UAAU,EAAe,GAA3B;;IACrB,MAAM,WAAW,IAAA,oJAAW;IAE5B,MAAM,eAAe;QACnB,OAAQ;YACN,KAAK;gBACH,OAAO;YACT,KAAK;gBACH,OAAO;YACT,KAAK;gBACH,OAAO;YACT,KAAK;gBACH,OAAO;YACT;gBACE,OAAO;QACX;IACF;IAEA,MAAM,kBAAkB;QACtB;YAAE,MAAM;YAAK,OAAO;QAAO;QAC3B;YAAE,MAAM;YAAa,OAAO;QAAW;QACvC;YAAE,MAAM;YAAa,OAAO;QAAW;QACvC;YAAE,MAAM;YAAU,OAAO;QAAQ;KAClC;IAED,qBACE,6LAAC;QAAO,WAAU;kBAChB,cAAA,6LAAC;YAAI,WAAU;sBACb,cAAA,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;;kDACC,6LAAC,0KAAI;wCAAC,MAAK;wCAAI,WAAU;kDAA6D;;;;;;kDAGtF,6LAAC;wCAAE,WAAU;kDAA6B;;;;;;;;;;;;4BAE3C,aAAa,qBACZ,6LAAC;gCAAI,WAAU;;kDACb,6LAAC;wCAAG,WAAU;kDAAqC;;;;;;oCAClD,aAAa,6BACZ,6LAAC;wCAAE,WAAU;kDAA6B;;;;;;;;;;;;;;;;;;kCAMlD,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAI,WAAU;0CACZ,gBAAgB,GAAG,CAAC,CAAC,qBACpB,6LAAC,0KAAI;wCAEH,MAAM,KAAK,IAAI;wCACf,WAAW,AAAC,iCAIX,OAHC,aAAa,KAAK,IAAI,GAClB,oBACA;kDAGL,KAAK,KAAK;uCARN,KAAK,IAAI;;;;;;;;;;4BAanB,4BACC,6LAAC;gCAAI,WAAU;;kDACb,6LAAC,yNAAQ;wCAAC,WAAU;;;;;;kDACpB,6LAAC;;4CAAK;4CAAS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQ/B;GA1EgB;;QACG,oJAAW;;;KADd","debugId":null}}]
}